<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HTML⑤</title>
      <link href="/2022/04/03/html/"/>
      <url>/2022/04/03/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML标题"><a href="#HTML标题" class="headerlink" title="HTML标题"></a>HTML标题</h1><hr><h2 id="HTML-标题"><a href="#HTML-标题" class="headerlink" title="HTML 标题"></a>HTML 标题</h2><p>标题（Heading）是通过 </p><h1> - </h1><h6> 标签进行定义的。<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> 定义最大的标题。 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span> 定义最小的标题。</code></pre></h6><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>这是一个标题。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这是一个标题。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_headers">尝试一下 »</a></p><p><strong>注释:</strong> 浏览器会自动地在标题的前后添加空行。</p><hr><h2 id="标题很重要"><a href="#标题很重要" class="headerlink" title="标题很重要"></a>标题很重要</h2><p>请确保将 HTML 标题 标签只用于标题。不要仅仅是为了生成<strong>粗体</strong>或<strong>大号</strong>的文本而使用标题。</p><p>搜索引擎使用标题为您的网页的结构和内容编制索引。</p><p>因为用户可以通过标题来快速浏览您的网页，所以用标题来呈现文档结构是很重要的。</p><p>应该将 h1 用作主标题（最重要的），其后是 h2（次重要的），再其次是 h3，以此类推。</p><hr><h2 id="HTML-水平线"><a href="#HTML-水平线" class="headerlink" title="HTML 水平线"></a>HTML 水平线</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>标签在HTML页面中表示一个水平线</code></pre><p>hr 元素可用于分隔内容。</p><h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_hr">尝试一下 »</a></p><hr><h2 id="HTML-注释"><a href="#HTML-注释" class="headerlink" title="HTML 注释"></a>HTML 注释</h2><p>可以将注释插入 HTML 代码中，这样可以提高其可读性，使代码更易被人理解。浏览器会忽略注释，也不会显示它们。</p><p>注释写法如下:</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><!-- 这是一个注释 --><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_comment">尝试一下 »</a></p><p><strong>注释:</strong> 开始括号之后（左边的括号）需要紧跟一个叹号 <strong>!</strong> (英文标点符号)，结束括号之前（右边的括号）不需要，合理地使用注释可以对未来的代码编辑工作产生帮助。</p><hr><h2 id="HTML-提示-如何查看源代码"><a href="#HTML-提示-如何查看源代码" class="headerlink" title="HTML 提示 - 如何查看源代码"></a>HTML 提示 - 如何查看源代码</h2><p>你是否看过一些网页然后惊叹它是如何实现的。</p><p>如果您想找到其中的奥秘，只需要单击右键，然后选择”查看源文件”（IE）或”查看页面源代码”（Firefox），其他浏览器的做法也是类似的。这么做会打开一个包含页面 HTML 代码的窗口。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>这是5号字体<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span></code></pre><h2 id="本站实例"><a href="#本站实例" class="headerlink" title="本站实例"></a>本站实例</h2><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_headers">标题</a><br>如何在 HTML 文档中显示标题。</p><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_comment">隐藏注释</a><br>如何在 HTML 源代码中插入注释。</p><p><a href="https://www.runoob.com/try/try.php?filename=tryhtml_hr">水平线</a><br>如何插入水平线。</p><hr><h2 id="HTML-标签参考手册"><a href="#HTML-标签参考手册" class="headerlink" title="HTML 标签参考手册"></a>HTML 标签参考手册</h2><p>菜鸟教程的标签参考手册提供了有关这些标题及其属性的更多信息。</p><p>您将在本教程下面的章节中学到更多有关 HTML 标签和属性的知识。</p><table><thead><tr><th align="left">标签</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"></td><td align="left">定义 HTML 文档</td></tr><tr><td align="left"></td><td align="left">定义文档的主体</td></tr><tr><td align="left"><h1>-</h1><h6></h6></td><td align="left">定义 HTML 标题</td></tr><tr><td align="left"><hr></td><td align="left">定义水平线</td></tr><tr><td align="left"><!-- --></td><td align="left">定义注释</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML④</title>
      <link href="/2022/04/02/html/"/>
      <url>/2022/04/02/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML属性："><a href="#HTML属性：" class="headerlink" title="HTML属性："></a>HTML属性：</h1><p>属性是 HTML 元素提供的附加信息。</p><hr><h2 id="HTML-属性"><a href="#HTML-属性" class="headerlink" title="HTML 属性"></a>HTML 属性</h2><ul><li>HTML 元素可以设置<strong>属性</strong></li><li>属性可以在元素中添加<strong>附加信息</strong></li><li>属性一般描述于<strong>开始标签</strong></li><li>属性总是以名称/值对的形式出现，**比如：name=”value”**。</li></ul><p>举个例子：</p><pre><code>&lt;a   href="http://ww.runoob.com"&gt;这是一个链接&lt;/a&gt;</code></pre><h2 id="HTML-属性常用引用属性值"><a href="#HTML-属性常用引用属性值" class="headerlink" title="HTML 属性常用引用属性值"></a>HTML 属性常用引用属性值</h2><p>属性值应该始终被包括在引号内。</p><p>双引号是最常用的，不过使用单引号也没有问题。</p><p><img src="https://www.runoob.com/images/lamp.gif" alt="Remark"><strong>提示:</strong> 在某些个别的情况下，比如属性值本身就含有双引号，那么您必须使用单引号，例如：name=’John “ShotGun” Nelson’</p><hr><h2 id="HTML-提示：使用小写属性"><a href="#HTML-提示：使用小写属性" class="headerlink" title="HTML 提示：使用小写属性"></a>HTML 提示：使用小写属性</h2><p>属性和属性值对大小写不敏感。</p><p>不过，万维网联盟在其 HTML 4 推荐标准中推荐小写的属性/属性值。</p><p>而新版本的 (X)HTML 要求使用小写属性。</p><hr><h2 id="HTML-属性参考手册"><a href="#HTML-属性参考手册" class="headerlink" title="HTML 属性参考手册"></a>HTML 属性参考手册</h2><p>查看完整的HTML属性列表: <a href="https://www.runoob.com/tags/html-reference.html">HTML 标签参考手册</a>。</p><p>下面列出了适用于大多数 HTML 元素的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">为html元素定义一个或多个类名（classname）(类名从样式文件引入)</td></tr><tr><td align="left">id</td><td align="left">定义元素的唯一id</td></tr><tr><td align="left">style</td><td align="left">规定元素的行内样式（inline style）</td></tr><tr><td align="left">title</td><td align="left">描述了元素的额外信息 (作为工具条使用)</td></tr></tbody></table><p>更多标准属性说明： <a href="https://www.runoob.com/tags/ref-standardattributes.html">HTML 标准属性参考手册</a>.</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML③</title>
      <link href="/2022/04/01/html/"/>
      <url>/2022/04/01/html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML元素："><a href="#HTML元素：" class="headerlink" title="HTML元素："></a>HTML元素：</h1><p>HTML的元素有开始标签、元素内容和结束标签：</p><table><thead><tr><th align="left">开始标签 *</th><th align="left">元素内容</th><th align="left">结束标签 *</th></tr></thead><tbody><tr><td align="left"><p></p></td><td align="left">这是一个段落</td><td align="left"><p></p></td></tr><tr><td align="left"><a href="default.htm"></a></td><td align="left">这是一个链接</td><td align="left"></td></tr><tr><td align="left"><br></td><td align="left">换行</td><td align="left"></td></tr></tbody></table><p><em>*<em><strong>开始标签常被称为</strong>起始标签（opening tag）</em>*，结束标签常称为</em>*闭合标签（closing tag）**。</p><h2 id="HTML-元素语法："><a href="#HTML-元素语法：" class="headerlink" title="HTML 元素语法："></a>HTML 元素语法：</h2><ul><li>HTML 元素以<strong>开始标签</strong>起始</li><li>HTML 元素以<strong>结束标签</strong>终止</li><li><strong>元素的内容</strong>是开始标签与结束标签之间的内容</li><li>某些 HTML 元素具有<strong>空内容（empty content）</strong></li><li>空元素<strong>在开始标签中进行关闭</strong>（以开始标签的结束而结束）</li><li>大多数 HTML 元素可拥有<strong>属性</strong></li></ul><h2 id="嵌套的-HTML-元素"><a href="#嵌套的-HTML-元素" class="headerlink" title="嵌套的 HTML 元素"></a>嵌套的 HTML 元素</h2><p>大多数 HTML 元素可以嵌套（HTML 元素可以包含其他 HTML 元素）。</p><p>HTML 文档由相互嵌套的 HTML 元素构成。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="HTML-实例解析"><a href="#HTML-实例解析" class="headerlink" title="HTML 实例解析"></a>HTML 实例解析</h2><p> 元素:</p><p>这是第一个段落。</p>这个 <p> 元素定义了 HTML 文档中的一个段落。这个元素拥有一个开始标签 </p><p> 以及一个结束标签 </p>.元素内容是: 这是第一个段落。<p>** 元素:**</p><p>这是第一个段落。</p> 元素定义了 HTML 文档的主体。这个元素拥有一个开始标签  以及一个结束标签 。元素内容是另一个 HTML 元素（p 元素）。<p>** 元素：**</p><p>这是第一个段落。</p> 元素定义了整个 HTML 文档。这个元素拥有一个开始标签  ，以及一个结束标签 .元素内容是另一个 HTML 元素（body 元素）。<hr><h2 id="不要忘记结束标签"><a href="#不要忘记结束标签" class="headerlink" title="不要忘记结束标签"></a>不要忘记结束标签</h2><p>即使您忘记了使用结束标签，大多数浏览器也会正确地显示 HTML：</p><p>这是一个段落</p><p>这是一个段落</p><p>以上实例在浏览器中也能正常显示，因为关闭标签是可选的。</p><p>但不要依赖这种做法。忘记使用结束标签会产生不可预料的结果或错误。</p><hr><h2 id="HTML-空元素"><a href="#HTML-空元素" class="headerlink" title="HTML 空元素"></a>HTML 空元素</h2><p>没有内容的 HTML 元素被称为空元素。空元素是在开始标签中关闭的。</p><p><br> 就是没有关闭标签的空元素（<br> 标签定义换行）。</p><p>在 XHTML、XML 以及未来版本的 HTML 中，所有元素都必须被关闭。</p><p>在开始标签中添加斜杠，比如 <br>，是关闭空元素的正确方法，HTML、XHTML 和 XML 都接受这种方式。</p><p>即使 <br> 在所有浏览器中都是有效的，但使用 <br> 其实是更长远的保障。</p><h2 id="HTML-提示：使用小写标签"><a href="#HTML-提示：使用小写标签" class="headerlink" title="HTML 提示：使用小写标签"></a>HTML 提示：使用小写标签</h2><p>HTML 标签对大小写不敏感：</p><p> 等同于 </p><p>。许多网站都使用大写的 HTML 标签。</p><p>菜鸟教程使用的是小写标签，因为万维网联盟（W3C）在 HTML 4 中<strong>推荐</strong>使用小写，而在未来 (X)HTML 版本中<strong>强制</strong>使用小写。</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初学HTML②</title>
      <link href="/2022/03/31/chu-xue-html/"/>
      <url>/2022/03/31/chu-xue-html/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础"><a href="#HTML基础" class="headerlink" title="HTML基础"></a>HTML基础</h1><h2 id="HTML-标题（Heading）是通过-标签来定义的："><a href="#HTML-标题（Heading）是通过-标签来定义的：" class="headerlink" title="HTML 标题（Heading）是通过 -  标签来定义的："></a>HTML 标题（Heading）是通过</h2><h1> - </h1><h6> 标签来定义的：</h6><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>这是一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span></code></pre><p><img src="E:\blog\source_posts\初学HTML②\1648742149651.png" alt="1648742149651"></p><h2 id="HTML段落："><a href="#HTML段落：" class="headerlink" title="HTML段落："></a>HTML段落：</h2><h2 id="HTML的段落是由标签来定义的："><a href="#HTML的段落是由标签来定义的：" class="headerlink" title="HTML的段落是由标签来定义的："></a>HTML的段落是由标签<p>来定义的：</p></h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>这是另外一个段落<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><h2 id="HTML链接："><a href="#HTML链接：" class="headerlink" title="HTML链接："></a>HTML链接：</h2><h2 id="HTML链接是由标签来定义的："><a href="#HTML链接是由标签来定义的：" class="headerlink" title="HTML链接是由标签来定义的："></a>HTML链接是由标签<a>来定义的：</a></h2><pre><a><code class="html">&lt;a href="https://www.runoob.com"&gt;这是一个链接&lt;/a&gt;</code></a></pre><a></a><h2 id="HTML图像："><a></a><a href="#HTML图像：" class="headerlink" title="HTML图像："></a>HTML图像：</h2><h2 id="HTML的图像是由标签来定义的"><a href="#HTML的图像是由标签来定义的" class="headerlink" title="HTML的图像是由标签来定义的"></a>HTML的图像是由标签<img>来定义的</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">scr</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/logo.png<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>258<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>39<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初学HTML</title>
      <link href="/2022/03/30/chu-xue-html/"/>
      <url>/2022/03/30/chu-xue-html/</url>
      
        <content type="html"><![CDATA[<h1 id="初学HTML"><a href="#初学HTML" class="headerlink" title="初学HTML"></a>初学HTML</h1><h2 id="什么是HTML："><a href="#什么是HTML：" class="headerlink" title="什么是HTML："></a>什么是HTML：</h2><ul><li>HTML 指的是超文本标记语言 (<strong>H</strong>yper <strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage)</li><li>HTML 不是一种编程语言，而是一种<em>标记语言</em> (markup language)</li><li>标记语言是一套<em>标记标签</em> (markup tag)</li><li>HTML 使用<em>标记标签</em>来描述网页</li></ul><h2 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h2><p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p><ul><li>HTML 标签是由<em>尖括号</em>包围的关键词，比如 </li><li>HTML 标签通常是<em>成对出现</em>的，比如  <b> &nbsp;&nbsp;</b></li><li>标签对中的第一个标签是<em>开始标签</em>，第二个标签是<em>结束标签</em></li><li>开始和结束标签也被称为<em>开放标签</em>和<em>闭合标签</em></li></ul><h2 id="HTML-文档-x3D-网页"><a href="#HTML-文档-x3D-网页" class="headerlink" title="HTML 文档 = 网页"></a>HTML 文档 = 网页</h2><ul><li>HTML 文档<em>描述网页</em></li><li>HTML 文档<em>包含 HTML 标签</em>和纯文本</li><li>HTML 文档也被称为<em>网页</em></li></ul><h2 id="Web-浏览器的作用是读取-HTML-文档，并以网页的形式显示出它们。浏览器不会显示-HTML-标签，而是使用标签来解释页面的内容："><a href="#Web-浏览器的作用是读取-HTML-文档，并以网页的形式显示出它们。浏览器不会显示-HTML-标签，而是使用标签来解释页面的内容：" class="headerlink" title="Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容："></a>Web 浏览器的作用是读取 HTML 文档，并以网页的形式显示出它们。浏览器不会显示 HTML 标签，而是使用标签来解释页面的内容：</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>我的第一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我的第一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> 与 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span> 之间的文本描述网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 与 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 之间的文本是可见的页面内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> 与 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> 之间的文本被显示为标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span> 与 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span> 之间的文本被显示为段落</code></pre><p><img src="E:\blog\source_posts\初学HTML\1648655659382.png" alt="1648655659382"></p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mysql第八章</title>
      <link href="/2022/03/29/mysql-di-ba-zhang/"/>
      <url>/2022/03/29/mysql-di-ba-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="多表关系："><a href="#多表关系：" class="headerlink" title="多表关系："></a>多表关系：</h1><p>项目开发中，在进行数据库结构设计时，我们会根据实际情况分析模块之间的关系，分析设计表结构，由于表之间的关系，我们可以划分为三种表：</p><p>1.一对多：1:n</p><p>2.多对多的关系：n:m</p><p>3.一对一的关系：1:1</p><h2 id="这样还是有点抽象那我们举个例子："><a href="#这样还是有点抽象那我们举个例子：" class="headerlink" title="这样还是有点抽象那我们举个例子："></a>这样还是有点抽象那我们举个例子：</h2><p>一对多的例子:</p><p><img src="E:\blog\source_posts\Mysql第八章\1648549388555.png" alt="1648549388555"></p><p><img src="E:\blog\source_posts\Mysql第八章\1648549418222.png" alt="1648549418222"></p><p>这里就是典型的一对多的关系，多的一方关联着那边的主键。</p><p>多对多的例子：</p><p>案例：学生与课程的关系</p><p>关系：一个学生可以选修多门课程，一门课程也可以供多个学生选择</p><p>实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p><p><img src="E:\blog\source_posts\Mysql第八章\1648551965534.png" alt="1648551965534"></p><p><img src="E:\blog\source_posts\Mysql第八章\1648551973774.png" alt="1648551973774"></p><p><img src="E:\blog\source_posts\Mysql第八章\1648552177542.png" alt="1648552177542"></p><p>一对一的例子：</p><p>关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率。</p><p>学生都有身份证和学号，每一个身份证都对应着一个学号。</p><p>这个比较简单我就不演示了</p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>前面我们使用的查询，只是对单表进行查询，在具体的应用中，经常需要实现在一个查询语句中显示多张数据表的数据，这就是所谓的多表联合查询。</p><p>在具体实现连接操作时，首先将两个或两个以上的表按照某个条件连接起来，然后再查询到所要求的数据记录。</p><p>连接查询分为<strong>交叉连接</strong>、<strong>内连接</strong>、<strong>外连接</strong>查询三种方式。</p><h3 id="交叉连接"><a href="#交叉连接" class="headerlink" title="交叉连接"></a>交叉连接</h3><blockquote><p>交叉连接不带WHERE子句，它返回被连接的两个表所有数据行的笛卡尔积</p></blockquote><ul><li>查询员工及员工所在的部门信息</li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM emp,dept;　SELECT * FROM emp CROSS JOIN dept;　</code></pre><p>如果不加条件直接进行查询，则数据条数是两个表记录条数的乘积，这种结果我们称之为 <strong>笛卡尔乘积</strong>。</p><blockquote><p>笛卡尔乘积公式 : A表中数据条数  * B表中数据条数 = 笛卡尔乘积</p></blockquote><p>如果两张表的数据量都很大，那么这种庞大时很可怕的，所以现在必须想办法消除掉笛卡尔积的无效记录。</p><p>想要消除笛卡尔积的无效记录，需要使用关联字段。</p><p><strong>范例：</strong>利用等值条件来处理笛卡尔积</p><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM emp,dept WHERE emp.deptno=dept.deptno;</code></pre><p><img src="E:\blog\source_posts\Mysql第八章\1648554630380.png" alt="1648554630380"></p><p><img src="E:\blog\source_posts\Mysql第八章\1648554679951.png" alt="1648554679951"></p><h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><blockquote><p>在表关系的笛卡尔积数据记录中，保留表关系中所有匹配的数据记录，舍弃不匹配的数据记录。按匹配的条件可以分成等值连接和不等值连接。</p></blockquote><p>有两种，显式的和隐式的，返回连接表中符合连接条件和查询条件的数据行。（所谓的链接表就是数据库在做查询形成的中间表）。</p><ul><li>隐式内连接</li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM 表1，表2 WHERE 条件;</code></pre><ul><li><p><img src="E:\blog\source_posts\Mysql第八章\1648556745899.png" alt="1648556745899"></p></li><li><p>显示内连接（使用关键字INNER  JOIN）</p></li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM 表1 [INNER] JOIN 表2 ON 条件; </code></pre><p><img src="E:\blog\source_posts\Mysql第八章\1648556820703.png" alt="1648556820703"></p><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><blockquote><p>在连接条件中使用等于号(=)运算符比较被连接列的列值，</p></blockquote><ul><li>查询员工及员工部门信息</li></ul><pre class=" language-mysql"><code class="language-mysql">#隐式连接SELECT * FROM emp e,dept d WHERE e.deptno=d.deptno;#显示连接SELECT * FROM emp e INNER JOIN dept d ON e.deptno=d.deptno;</code></pre><ul><li>等值连接可以使用USING来自动关联两表中相同的列</li></ul><pre class=" language-mysql"><code class="language-mysql">SELECT * FROM emp INNER JOIN dept USING(deptno);</code></pre><p><img src="E:\blog\source_posts\Mysql第八章\1648557283972.png" alt="1648557283972"></p><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><blockquote><p> 在连接条件使用除等于运算符以外的其它比较运算符比较被连接的 列的列值。这些运算符包括&gt;、&gt;=、&lt;=、&lt;、!&gt;、!&lt;和&lt;&gt;等。 </p></blockquote><ul><li>查询员工工资级别</li></ul><pre class=" language-mysql"><code class="language-mysql">#隐式连接SELECT * FROM emp e,salgrade s WHERE e.sal BETWEEN s.losal AND s.hisal;#显示连接SELECT * FROM emp e INNER JOIN salgrade s ON  e.sal BETWEEN s.losal AND s.hisal;</code></pre><p><img src="E:\blog\source_posts\Mysql第八章\1648557559978.png" alt="1648557559978"></p><p><img src="E:\blog\source_posts\Mysql第八章\1648557710362.png" alt="1648557710362"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt信号与槽的拓展和案例</title>
      <link href="/2022/03/26/qt-xin-hao-yu-cao-de-tuo-zhan-he-an-li/"/>
      <url>/2022/03/26/qt-xin-hao-yu-cao-de-tuo-zhan-he-an-li/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt信号与槽的拓展和案例"><a href="#Qt信号与槽的拓展和案例" class="headerlink" title="Qt信号与槽的拓展和案例"></a>Qt信号与槽的拓展和案例</h1><h2 id="1-标准信号和槽的使用："><a href="#1-标准信号和槽的使用：" class="headerlink" title="1.标准信号和槽的使用："></a>1.标准信号和槽的使用：</h2><p><img src="E:\blog\source_posts\Qt信号与槽的拓展和案例\1648284450392.png" alt="1648284450392"></p><h2 id="2-自定义的信号与槽的使用："><a href="#2-自定义的信号与槽的使用：" class="headerlink" title="2.自定义的信号与槽的使用："></a>2.自定义的信号与槽的使用：</h2><p><img src="E:\blog\source_posts\Qt信号与槽的拓展和案例\1648286422772.png" alt="1648286422772"></p><h1 id="4-信号槽拓展"><a href="#4-信号槽拓展" class="headerlink" title="4. 信号槽拓展"></a>4. 信号槽拓展</h1><h2 id="4-1-信号槽使用拓展"><a href="#4-1-信号槽使用拓展" class="headerlink" title="4.1 信号槽使用拓展"></a>4.1 信号槽使用拓展</h2><ul><li><p>一个信号可以连接多个槽函数, 发送一个信号有多个处理动作</p><ul><li>需要写多个<code>connect</code>连接</li><li>信号的接收者可以是一个对象, 也可以是多个对象</li></ul></li><li><p>一个槽函数可以连接多个信号, 多个不同的信号, 处理动作是相同的</p><ul><li>写多个<code>connect</code>就可以</li></ul></li><li><p>信号可以连接信号</p><ul><li>信号接收者可以不出来接收的信号, 继续发出新的信号 -&gt; 传递了数据, 并没有进行处理</li></ul></li></ul><p><img src="E:\blog\source_posts\Qt信号与槽的拓展和案例\1648286822336.png" alt="1648286822336"></p><p>信号槽也是可以断开的</p><pre class=" language-c++"><code class="language-c++">disconnect(const QObject *sender, &QObject::signal,         const QObject *receiver, &QObject::method);</code></pre><p><img src="E:\blog\source_posts\Qt信号与槽的拓展和案例\1648286962578.png" alt="1648286962578"></p><h2 id="4-2-信号槽的连接方式"><a href="#4-2-信号槽的连接方式" class="headerlink" title="4.2 信号槽的连接方式"></a>4.2 信号槽的连接方式</h2><ul><li><p>Qt5的连接方式</p><pre class=" language-c++"><code class="language-c++">// 语法:QMetaObject::Connection QObject::connect(        const QObject *sender, PointerToMemberFunction signal,         const QObject *receiver, PointerToMemberFunction method,         Qt::ConnectionType type = Qt::AutoConnection);// 信号和槽函数也就是第2,4个参数传递的是地址, 编译器在编译过程中会对数据的正确性进行检测connect(const QObject *sender, &QObject::signal,         const QObject *receiver, &QObject::method);</code></pre></li><li><p>Qt4的连接方式</p><blockquote><p>这种旧的信号槽连接方式在Qt5中是支持的, 但是不推荐使用, 因为这种方式在进行信号槽连接的时候, 信号槽函数通过宏<code>SIGNAL</code>和<code>SLOT</code>转换为字符串类型。</p><p>因为信号槽函数的转换是通过宏来进行转换的，因此传递到宏函数内部的数据不会被进行检测， 如果使用者传错了数据，编译器也不会报错，但实际上信号槽的连接已经不对了，只有在程序运行起来之后才能发现问题，而且问题不容易被定位。</p></blockquote><pre class=" language-c++"><code class="language-c++">// Qt4的信号槽连接方式[static] QMetaObject::Connection QObject::connect(    const QObject *sender, const char *signal,     const QObject *receiver, const char *method,     Qt::ConnectionType type = Qt::AutoConnection);connect(const QObject *sender,SIGNAL(信号函数名(参数1, 参数2, ...)),        const QObject *receiver,SLOT(槽函数名(参数1, 参数2, ...)));</code></pre></li><li><p>应用举例</p><pre class=" language-c++"><code class="language-c++">class Me : public QObject{    Q_OBJECT// Qt4中的槽函数必须这样声明, qt5中的关键字 slots 可以被省略public slots:       void eat();    void eat(QString somthing);signals:    void hungury();    void hungury(QString somthing);};</code></pre></li></ul><p>基于上面写的信号与槽，我们来处理如下逻辑: 我饿了, 我要吃东西</p><ul><li><p><strong>分析</strong>: 信号的发出者是我自己, 信号的接收者也是我自己</p><pre class=" language-cpp"><code class="language-cpp">Me m<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Qt4处理方式  注意不要把信号与槽的名字写错了，因为是转为字符串写错了不会报错，但是连接会失败</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">hungury</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">eat</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">hungury</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Qt5处理方式</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Me<span class="token operator">::</span>eat<span class="token punctuation">,</span> <span class="token operator">&amp;</span>m<span class="token punctuation">,</span> <span class="token operator">&amp;</span>Me<span class="token operator">::</span>hungury<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// error:no matching member function for call to 'connect'</span></code></pre></li><li><p><strong>为什么Qt4的方式没有错误，Qt5的方式却有问题了呢？</strong></p><ul><li>Qt4的方式在传信号和槽的时候用了宏进行强转，而且都带了参数，不会有二义性问题产生</li><li>Qt5中，信号和槽都有重载，此事connect函数根本就不知道你要使用的是重载中的哪一个，所以只能报错咯！</li></ul></li><li><p><strong>如何解决Qt5中的信号和槽重载中的二义性问题呢？</strong></p><ul><li><p>一，通过函数指针解决</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//信号</span><span class="token keyword">void</span> <span class="token punctuation">(</span>Me<span class="token operator">::</span><span class="token operator">*</span>funchungury<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Me<span class="token operator">::</span>hungury<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span>Me<span class="token operator">::</span><span class="token operator">*</span>funchungury_QString<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Me<span class="token operator">::</span>hungury<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//槽</span><span class="token keyword">void</span> <span class="token punctuation">(</span>Me<span class="token operator">::</span><span class="token operator">*</span>funceat<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Me<span class="token operator">::</span>eat<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token punctuation">(</span>Me<span class="token operator">::</span><span class="token operator">*</span>funceat_QString<span class="token punctuation">)</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>Me<span class="token operator">::</span>eat<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//有参连接</span><span class="token function">connect</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span>funchungury_QString<span class="token punctuation">,</span>me<span class="token punctuation">,</span>funceat_QString<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参连接</span><span class="token function">connect</span><span class="token punctuation">(</span>me<span class="token punctuation">,</span>funchungury<span class="token punctuation">,</span>me<span class="token punctuation">,</span>funceat<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>二，通过Qt提供的重载类(QOverload)解决</p><pre class=" language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//有参连接</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>QOverload<span class="token operator">&lt;</span>QString<span class="token operator">></span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyButton<span class="token operator">::</span>hungury<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>QOverload<span class="token operator">&lt;</span>QString<span class="token operator">></span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyButton<span class="token operator">::</span>eat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//无参连接</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>QOverload<span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyButton<span class="token operator">::</span>hungury<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span>QOverload<span class="token operator">&lt;</span><span class="token operator">></span><span class="token operator">::</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>MyButton<span class="token operator">::</span>eat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><ul><li><strong>总结</strong><ul><li>Qt4的信号槽连接方式因为使用了宏函数, 宏函数对用户传递的信号槽不会做错误检测, 容易出bug</li><li>Qt5的信号槽连接方式, 传递的是信号槽函数的地址, 编译器会做错误检测, 减少了bug的产生</li><li>当信号槽函数被重载之后, Qt4的信号槽连接方式不受影响</li><li>当信号槽函数被重载之后, Qt5中需要给被重载的信号或者槽定义函数指针</li></ul></li></ul><h2 id="4-3-Lambda表达式"><a href="#4-3-Lambda表达式" class="headerlink" title="4.3 Lambda表达式"></a>4.3 Lambda表达式</h2><p>Lambda表达式是C++11最重要也是最常用的特性之一，是现代编程语言的一个特点，简洁，提高了代码的效率并且可以使程序更加灵活，Qt是完全支持c++语法的， 因此在Qt中也可以使用Lambda表达式。</p><p>Lambda表达式就是一个匿名函数， 语法格式如下：</p><pre class=" language-c++"><code class="language-c++">[capture](params) opt -> ret {body;};    - capture: 捕获列表    - params: 参数列表    - opt: 函数选项    - ret: 返回值类型    - body: 函数体        // 示例代码->匿名函数的调用:int ret = [](int a) -> int{    return a+1;}(100);</code></pre><p>关于Lambda表达式的细节介绍:</p><ol><li>捕获列表: 捕获一定范围内的变量<ul><li><code>[] </code>- 不捕捉任何变量</li><li><code>[&amp;] </code>- 捕获外部作用域中所有变量, 并作为引用在函数体内使用 (<code>按引用捕获</code>)</li><li><code>[=] </code>-  捕获外部作用域中所有变量, 并作为副本在函数体内使用 (<code>按值捕获</code>)<ul><li>拷贝的副本在匿名函数体内部是只读的</li></ul></li><li><code>[=, &amp;foo]</code> - 按值捕获外部作用域中所有变量, 并按照引用捕获外部变量 foo</li><li><code>[bar]</code> - 按值捕获 bar 变量, 同时不捕获其他变量</li><li><code>[&amp;bar]</code> - 按值捕获 bar 变量, 同时不捕获其他变量</li><li><code>[this]</code> - 捕获当前类中的this指针<ul><li>让lambda表达式拥有和当前类成员函数同样的访问权限</li><li>如果已经使用了 &amp; 或者 =, 默认添加此选项</li></ul></li></ul></li><li>参数列表: 和普通函数的参数列表一样</li><li>opt 选项 –&gt;  <code>可以省略</code><ul><li>mutable: 可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）</li><li>exception: 指定函数抛出的异常，如抛出整数类型的异常，可以使用throw();</li></ul></li><li>返回值类型:<ul><li>标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略</li></ul></li><li>函数体:<ul><li>函数的实现，这部分不能省略，但函数体可以为空。</li></ul></li></ol><p><img src="E:\blog\source_posts\Qt信号与槽的拓展和案例\1648287270350.png" alt="1648287270350"></p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt的信号与槽</title>
      <link href="/2022/03/25/qt-de-xin-hao-yu-cao/"/>
      <url>/2022/03/25/qt-de-xin-hao-yu-cao/</url>
      
        <content type="html"><![CDATA[<h1 id="信号与槽："><a href="#信号与槽：" class="headerlink" title="信号与槽："></a>信号与槽：</h1><p>信号槽是 Qt 框架引以为豪的机制之一。所谓信号槽，实际就是观察者模式(发布-订阅模式)。当某个<code>事件</code>发生之后，比如，按钮检测到自己被点击了一下，它就会发出一个信号（signal）。这种发出是没有目的的，类似广播。如果有对象对这个信号感兴趣，它就会使用连接（connect）函数，意思是，将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号。也就是说，当信号发出时，被连接的槽函数会自动被回调。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发。</p><h2 id="那信号的本质是啥呢？"><a href="#那信号的本质是啥呢？" class="headerlink" title="那信号的本质是啥呢？"></a>那信号的本质是啥呢？</h2><p>信号是由用户的操作而产生的特定的事件，QT会发出某个信号，从而产生一系列的反应。</p><p>所以信号的本质是事件，当我们点击或者刷新等都会产生一个信号。</p><h2 id="那信号是什么形式给反应的对象的呢？"><a href="#那信号是什么形式给反应的对象的呢？" class="headerlink" title="那信号是什么形式给反应的对象的呢？"></a>那信号是什么形式给反应的对象的呢？</h2><p>我们对窗口进行操作，窗口的事件触发，发出一个特定的信号，信号的表现方式是函数，也就是我们触发信号就会调用特定的函数，通知反应的对象。</p><h2 id="那槽的本质是啥呢？"><a href="#那槽的本质是啥呢？" class="headerlink" title="那槽的本质是啥呢？"></a>那槽的本质是啥呢？</h2><p>槽就是对信号的一个处理函数。槽就是一个函数，可以有多种形式的函数：有普通函数还有类的成员函数，还可以有参数，可以被重载，最主要的是它可以是lambda表达式，但是它可以信号触发的时候被自动调用。</p><h2 id="那信号和槽怎么连接在一起的呢？"><a href="#那信号和槽怎么连接在一起的呢？" class="headerlink" title="那信号和槽怎么连接在一起的呢？"></a>那信号和槽怎么连接在一起的呢？</h2><p>Qt中的信号与槽函数本来是俩个不相干的东西，但是我们可以通过一个QObject::connect()函数实现连接。</p><pre class=" language-c++"><code class="language-c++">[static] QMetaObject::Connection  QObject::connect(    const QObject *sender,                                     const char *signal,                                     const QObject *receiver,                                 const char *method,                                     Qt::ConnectionType type = Qt::AutoConnection</code></pre><p><strong>参数:</strong></p><ul><li><p><strong>sender</strong>: 发出信号的对象</p></li><li><p><strong>signal</strong>: sender对象的信号，信号是一个函数</p></li><li><p><strong>receiver</strong>: 信号接收者</p></li><li><p><strong>method</strong>: receiver对象的槽函数, 当检测到sender发出了signal信号, receiver对象调用method方法</p><p>​     connect函数相对于做了信号处理动作的注册,调用conenct连接信号与槽时，sender对象的信号并没有产生, 因此receiver对象的method也不会被调用,method槽函数本质是一个回调函数, 调用的时机是信号产生之后。 调用槽函数是Qt框架来执行的,connect中的sender和recever两个指针必须被实例化了, 否则conenct不会成功`</p></li></ul><h1 id="Qt中有标准的信号与槽："><a href="#Qt中有标准的信号与槽：" class="headerlink" title="Qt中有标准的信号与槽："></a>Qt中有标准的信号与槽：</h1><p>系统自带的信号和槽通常如何查找呢，这个就需要利用帮助文档了，在帮助文档中比如我们上面的按钮的点击信号，在帮助文档中输入QPushButton，首先我们可以在<code>Contents</code>中寻找关键字 <code>signals</code>，信号的意思，但是我们发现并没有找到，这时候我们应该看当前类从父类继承下来了哪些信号，因此我们去他的父类QAbstractButton中就可以找到该关键字，点击signals索引到系统自带的信号有如下几个</p><p><img src="E:\blog\source_posts\Qt的信号与槽\1648224064753.png" alt="1648224064753"></p><blockquote><p>功能实现： 点击窗口上的按钮, 关闭窗口</p><ul><li>按钮: 信号发出者 -&gt; <code>QPushButton</code></li><li>窗口: 信号的接收者和处理者 -&gt; <code>QWidget</code></li></ul></blockquote><pre class=" language-c++"><code class="language-c++">// 单击按钮发出的信号[signal] void QAbstractButton::clicked(bool checked = false)// 关闭窗口的槽函数[slot] bool QWidget::close();// 单击按钮关闭窗口connect(ui->closewindow, &QPushButton::clicked, this, &MainWindow::close);</code></pre><h1 id="3-自定义信号槽使用"><a href="#3-自定义信号槽使用" class="headerlink" title="3. 自定义信号槽使用"></a>3. 自定义信号槽使用</h1><blockquote><p>Qt框架提供的信号槽在某些特定场景下是无法满足我们的项目需求的，因此我们还设计自己需要的的信号和槽，同样还是使用connect()对自定义的信号槽进行连接。</p></blockquote><p>如果想要使用自定义的信号和槽, 首先要编写新的类并且让其继承Qt的某些标准类,我们自己编写的类想要在Qt中使用使用信号槽机制, 那么必须要满足的如下条件: </p><ul><li>这个类必须从QObject类或者是其子类进行派生</li><li>在定义类的第一行头文件中加入 Q_OBJECT 宏</li></ul><pre class=" language-c++"><code class="language-c++">// 在头文件派生类的时候，首先像下面那样引入Q_OBJECT宏：class MyMainWindow : public QWidget{    Q_OBJECTpublic:    ......}</code></pre><h2 id="3-1-自定义信号"><a href="#3-1-自定义信号" class="headerlink" title="3.1 自定义信号"></a>3.1 自定义信号</h2><ul><li><p>信号是类的成员函数</p></li><li><p>返回值是 void 类型</p></li><li><p>参数可以随意指定, 信号也支持重载</p></li><li><p>信号需要使用 signals 关键字进行声明, 使用方法类似于public等关键字</p></li><li><p>信号函数只需要声明, 不需要定义(没有函数体实现)</p></li><li><p>在程序中发送自定义信号: 发送信号的本质就是调用信号函数</p><pre class=" language-cpp"><code class="language-cpp">emit <span class="token function">mysignals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//发送信号</span></code></pre><p><span style="color:red;font-size:13px;">emit是一个空宏，没有特殊含义，仅用来表示这个语句是发射一个信号，不写当然可以。</span></p></li></ul><pre class=" language-c++"><code class="language-c++">// 举例: 信号重载// Qt中的类想要使用信号槽机制必须要从QObject类派生(直接或间接派生都可以)class MyButton : public QPushButton{    Q_OBJECTsignals:    void testsignal();    void testsignal(int a);};//qRegisterMetaType</code></pre><p>信号参数的作用是数据传递, 谁调用信号函数谁就指定实参，实参最终会被传递给槽函数</p><h2 id="3-2-自定义槽"><a href="#3-2-自定义槽" class="headerlink" title="3.2 自定义槽"></a>3.2 自定义槽</h2><blockquote><p>槽函数就是信号的处理动作，自定义槽函数和自定义的普通函数写法是一样的。</p></blockquote><p><strong>特点：</strong></p><ul><li><p>返回值是 void 类型</p></li><li><p>槽函数也支持重载</p><ul><li>槽函数参数个数, 需要看连接的信号的参数个数</li><li>槽函数的参数是用来接收信号发送的数据的, 信号的参数就是需要发送的数据</li><li>举例:<ul><li>信号函数: void testsig(int a, double b);</li><li>槽函数:   void testslot(int a, double b);</li></ul></li><li>总结:<ul><li>槽函数的参数应该和对应的信号的参数个数, 类型一一对应</li><li>信号的参数可以大于等于槽函数的参数个数，未被槽函数接受的数据会被忽略<ul><li>信号函数: void testsig(int a, double b);</li><li>槽函数:   void testslot(int a);</li></ul></li></ul></li></ul></li></ul><p><strong>槽函数的类型:</strong></p><ul><li>成员函数<ul><li>普通成员函数</li><li>静态成员函数</li></ul></li><li>全局函数</li><li>lambda表达式(匿名函数)</li></ul><ol start="4"><li>槽函数可以使用关键字进行声明: slots (Qt5中slots可以省略不写)<ul><li>public slots:</li><li>private slots:</li><li>protected slots:</li></ul></li></ol><p>还有信号与槽的拓展没写。</p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>win32的线程</title>
      <link href="/2022/03/22/win32-de-xian-cheng/"/>
      <url>/2022/03/22/win32-de-xian-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Win32线程"><a href="#Win32线程" class="headerlink" title="Win32线程"></a>Win32线程</h1><h2 id="线程的创建函数："><a href="#线程的创建函数：" class="headerlink" title="线程的创建函数："></a>线程的创建函数：</h2><pre class=" language-c++"><code class="language-c++">HANDLE CreateThread(    LPSECURITY_ATTRIBUTES lpThreadAttributes,//线程结构体地址  用来继承    SIZE_T dwStackSize,                         //线程堆栈大小    LPTHREAD_START_ROUTINE lpStartAddress,   //线程起始地址  线程 函数名     LPVOID lpParameter,                         //线程函数的参数    DWORD dwCreationFlags,                     //创建方式        LPDWORD lpThreadId);                     //线程id</code></pre><p>这个线程函数返回的是一个句柄 函数名字更好理解了就是一个创建线程，第1，2个参数通常是NULL（默认值），第三个参数是一个函数名，如果函数不是DWORD WINAPI func(LPVOID lpThreadParameter);这种格式切记函数名要进行强转（LPTHREAD_START_ROUTINE），第三个就是函数的参数了也要强转（LPVOID），这个你得看情况而定，后面俩个也可以传NULL，但是你想要线程id的话可以自己创建，但是句柄和线程的ID可以互相转换。</p><p>线程的代码：线程函数<br>线程函数的参数：   有且只有一个   void* 类型线程句柄 ，线程id可以对线程进行操作的东西。</p><p> cpu时间分片：硬件层次是分开的    应用层  多个线程 并发执行！，在以前单核的时候并没有并行，只有并发，也是假并行。<br> 进程：一个运行中的程序！，计算机对数据操作的过程。</p><p>进程和线程：<br>进程是系统资源调度的单位，进程有独立的系统资源，而线程没有公用的资源。<br>线程是系统调度单位一个进程内有一个或多个线程同一个进程的线程共享进程的所有资源。</p><h2 id="线程的结束："><a href="#线程的结束：" class="headerlink" title="线程的结束："></a>线程的结束：</h2><pre><code>1. ### 自然结束   线程函数返回；这个不用怎么想的知道怎么没的。### 2.还可以被干掉了。### 2.1 主线程结束了 分支线程也就结束了。### 2.2 被其他线程主动干掉。###     TerminateThread ： TerminateThread强烈不建议使用，这个可能会导致内存泄漏。```c++BOOL WINAPI TerminateThread(  _Inout_  HANDLE hThread,//句柄  _In_     DWORD dwExitCode//线程退出值);```这个函数想当简单我不在说啥了。## 2.3 自己干掉自己###     ExitThread```c++VOID ExitThread（DWORD dwExitCode）//调用线程的退出代码。使用 GetExitCodeThread 函数检索线程的退出代码。```1. ### 已知线程id，获取线程句柄 OpenThread``` HANDLE OpenThread(  [in] DWORD dwDesiredAccess,  [in] BOOL  bInheritHandle,  [in] DWORD dwThreadId ); ```## 参数```c++[in] dwDesiredAccess```对线程对象的访问。根据线程的安全描述符检查此访问权限。此参数可以是一个或多个[线程访问权限](https://docs.microsoft.com/en-us/windows/desktop/ProcThread/thread-security-and-access-rights)。如果调用方启用了 SeDebugPrivilege 特权，则无论安全描述符的内容如何，都将授予所请求的访问权限。```c++[in] bInheritHandle```如果此值为 TRUE，则此进程创建的进程将继承句柄。否则，进程不会继承此句柄。```c++[in] dwThreadId```要打开的线程的标识符。该传NULL的不用多说了吧1. ### 获取当前线程id GetCurrentThreadId    ```c++    DWORD GetCurrentThreadId();```1. ### 获取线程函数的返回值 GetExitCodeThread```c++BOOL GetExitCodeThread(  [in]  HANDLE  hThread,//句柄  [out] LPDWORD lpExitCode//指向变量的指针，用于接收线程终止状态);```## 等待线程结束   阻塞式等待### WaitForSingleObject            等一个```c++DWORD WaitForSingleObject(  [in] HANDLE hHandle,//句柄  [in] DWORD  dwMilliseconds);```第二个参数： 超时间隔，以毫秒为单位。如果指定了非零值，则该函数将一直等待，直到向对象发出信号或间隔过去。如果 *dw毫秒*为零，则在对象未发出信号时，函数不会进入等待状态;它总是立即返回。如果 *dw毫秒*为 **INFINITE**，则函数仅在向对象发出信号时返回。 ### WaitForMultipleObjects      等多个  </code></pre><p>​       </p><pre class=" language-c++"><code class="language-c++">DWORD WaitForMultipleObjects(  [in] DWORD        nCount,//回收的个数  [in] const HANDLE *lpHandles，//对象句柄数组  [in] BOOL         bWaitAll,//如果此参数为 TRUE，则当 lpHandles 数组中所有对象的状态发出信号时，该函数将返回。如果为 FALSE，则当任何一个对象的状态设置为已发出信号时，该函数将返回。在后一种情况下，返回值指示其状态导致函数返回的对象。  [in] DWORD        dwMilliseconds//这个和回收一个是一样的);</code></pre><p>​            </p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      <categories>
          
          <category> libevent </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux动态库找不到的解决方法</title>
      <link href="/2022/03/19/linux-dong-tai-ku-zhao-bu-dao-de-jie-jue-fang-fa/"/>
      <url>/2022/03/19/linux-dong-tai-ku-zhao-bu-dao-de-jie-jue-fang-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-动态库找不到的解决办法"><a href="#Linux-动态库找不到的解决办法" class="headerlink" title="Linux 动态库找不到的解决办法"></a>Linux 动态库找不到的解决办法</h1><h2 id="1-The-first-way"><a href="#1-The-first-way" class="headerlink" title="1.The first way:"></a>1.The first way:</h2><p>1.使用环境变量LD_LIBRARY_PATH。</p><p>2.动态库的绝对路径添加到该环境变量中。</p><p>3.LD_LIBRARY_PATH=/usr/include/XXX:$LD_LIBRARY_PATH</p><p>4.export  LD_LIBRARY_PATH</p><p>这个有个问题是：简单的在shell中-临时设置的环境变量，控制台关了也会消失，所以我们应该写入配置文件</p><p>可以通过~/.bashrc -用户级别的文件或者/etc/prefile -系统级别的。</p><h2 id="2-The-second-method："><a href="#2-The-second-method：" class="headerlink" title="2.The second method："></a>2.The second method：</h2><p>1.给动态库设置软链接 /usr/kevin/fastdfs。</p><p>2.将软链接放到 /usr/lib /usr/lib4 /lib /lib4</p><p>3.sudo ln -s /usr/kevin/fastdfs/xxx.so /usr/lib/libXXX.so</p><h2 id="3-The-third-method："><a href="#3-The-third-method：" class="headerlink" title="3.The third method："></a>3.The third method：</h2><p>需要刷新/etc/ld.so.cache。</p><p>首先vi /etc/ld.so.conf。</p><p>将动态库的绝对路径写入该文件。</p><p>sudo ldconfig -v(v是可视化可有可无)。</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL第七章</title>
      <link href="/2022/03/18/mysql-di-qi-zhang/"/>
      <url>/2022/03/18/mysql-di-qi-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL函数"><a href="#MySQL函数" class="headerlink" title="MySQL函数"></a>MySQL函数</h1><h2 id="什么叫函数呢："><a href="#什么叫函数呢：" class="headerlink" title="什么叫函数呢："></a>什么叫函数呢：</h2><p>MySQL 函数会对传递进来的参数进行一系列的处理，并且返回一个结果，这就是函数的定义了。</p><p>MySQL包含了大量的函数并且丰富多彩，我们就来了解一下那几十个常用的，剩下的可以去「<a href="https://dev.mysql.com/doc/refman/8.0/en/functions.html">MySQL 参考手册</a>」查询。</p><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>UPPER(列|字符串)</td><td>将字符串每个字符转为大写</td></tr><tr><td>LOWER(列|字符串)</td><td>将字符串每个字符转为小写</td></tr><tr><td>CONCAT(str1,str2,…)</td><td>将所有字符串连接成一个字符串</td></tr><tr><td>REPLACE(列|字符串,新字符串)</td><td>使用新字符串替换旧字符串</td></tr><tr><td>LENGTH(列|字符串)</td><td>求字符串长度</td></tr><tr><td>SUBSTR(列|字符串,开始点[,长度])</td><td>字符串截取</td></tr><tr><td>LEFT(str,len)</td><td>获取字符串左边len个字符组成的字符串</td></tr><tr><td>RIGHT(str,len)</td><td>获取字符串右边len个字符组成的字符串</td></tr><tr><td>MID(str,pos,len)</td><td>获取字符串中从pos(第几个)位置开始，长度为len的字符串</td></tr><tr><td>ASCII(字符)</td><td>返回与指定字符对应的十进制整数</td></tr><tr><td>CHR(数字)</td><td>返回与整数对应的字符</td></tr><tr><td>RPAD(列|字符串,长度,填充字符)<br>LPAD(列|字符串,长度,填充字符)</td><td>用指定的字符在字符串右或左填充</td></tr><tr><td>LTRIM(字符串)、RTRIM(字符串)</td><td>去掉字符串左或右的空格</td></tr><tr><td>TRIM(列|字符串)</td><td>去掉字符串左右空格</td></tr><tr><td>INSTR(列|字符串,要查找的字符串,开始位置,出现位置)</td><td>查找一个子字符串是否在指定的位置上出现</td></tr></tbody></table><p><img src="E:\blog\source_posts\MySQL第七章\1647583819068.png" alt="1647583819068"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647583827231.png" alt="1647583827231"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647584931122.png" alt="1647584931122"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647584939724.png" alt="1647584939724"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647585184084.png" alt="1647585184084"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647585192781.png" alt="1647585192781"></p><h2 id="这里就不一-一演示了。"><a href="#这里就不一-一演示了。" class="headerlink" title="这里就不一 一演示了。"></a>这里就不一 一演示了。</h2><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>ROUND(数字[,保留位数])</td><td>根据指定的保留位数对小数进行四舍五入，如果不指定保留位数，则小数点之后的数字全部进行全部四舍五入</td></tr><tr><td>TRUNCATE(数字[,截取位数])</td><td>保留指定位数的小数，如果不指定，则表示不保留</td></tr><tr><td>CEIL(数字)，CEILING(数字)</td><td>对小数向上取整</td></tr><tr><td>FLOOR(数字)</td><td>对小数向下取整</td></tr><tr><td>RAND([n])</td><td>随机返回0到1.0之间的小数，如果指定n每次产生的就都是重复的</td></tr></tbody></table><p>通过数据库的函数，生成一个六位数字的随机验证码。</p><pre class=" language-mysql"><code class="language-mysql">SELECT LPAD(TRUNCATE(RAND()*1000000,0),6,'0');</code></pre><p><img src="E:\blog\source_posts\MySQL第七章\1647599540707.png" alt="1647599540707"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647599547748.png" alt="1647599547748"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647599597072.png" alt="1647599597072"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647599603179.png" alt="1647599603179"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647599766387.png" alt="1647599766387"></p><h3 id="这里就不一-一演示了。-1"><a href="#这里就不一-一演示了。-1" class="headerlink" title="这里就不一 一演示了。"></a>这里就不一 一演示了。</h3><h2 id="日期和时间函数"><a href="#日期和时间函数" class="headerlink" title="日期和时间函数"></a>日期和时间函数</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>CURDATE()，CURRENT_DATE()</td><td>返回当前日期</td></tr><tr><td>CURTIME()，CURRENT_TIME()</td><td>返回当前时间</td></tr><tr><td>NOW()，CURRENT_TIMESTAMP()，LOCALTIME()，<br>SYSDATE()，LOCALTIMESTAMP()</td><td>返回会当前日期和事件</td></tr><tr><td>YEAR(日期)</td><td>返回日期中的年份</td></tr><tr><td>MONTH(日期)</td><td>返回日期中的月份[1,12]</td></tr><tr><td>DAY(日期)</td><td>返回日期中的天[1,31]</td></tr><tr><td>HOUR(时间)</td><td>返回时间中的小时</td></tr><tr><td>MINUTE(时间)</td><td>返回实践中的分钟</td></tr><tr><td>SECOND(时间)</td><td>返回时间中的秒</td></tr><tr><td>DAYOFWEEK(日期)</td><td>返回星期几，1星期日，2星期一</td></tr><tr><td>WEEKDAY(日期)</td><td>返回星期几，0星期一，1星期二</td></tr><tr><td>DAYOFYEAR(日期)</td><td>计算指定日期是本年第几天</td></tr><tr><td>DAYOFMONTH(日期)</td><td>计算指定日期是本月第几天</td></tr><tr><td>QUARTER(日期)</td><td>计算指定日期是第几季度</td></tr><tr><td>TIME_TO_SEC(time)</td><td>将指定时间转换为秒</td></tr><tr><td>SEC_TO_TIME(sec)</td><td>将以秒为单位的时间转换为时分秒的格式</td></tr><tr><td>DATEDIFF(d1,d2)</td><td>计算两个日期相隔的天数</td></tr><tr><td>ADDDATE(date,n)</td><td>计算指定日期加上n天后的日期</td></tr><tr><td>SUBDATE(date,n)</td><td>计算指定日期减去n天后的日期</td></tr><tr><td>ADDTIME(time,n)</td><td>计算指定时间加上n秒后的时间</td></tr><tr><td>SUBTIME(time,n)</td><td>计算指定时间减去n秒后的时间</td></tr><tr><td>DATE_FORMAT(date,f)</td><td>按格式返回日期</td></tr><tr><td>TIME_FORMAT(time,f)</td><td>按格式返回时间</td></tr></tbody></table><h2 id="条件判断函数"><a href="#条件判断函数" class="headerlink" title="条件判断函数"></a>条件判断函数</h2><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>IF(expr,v1,v2)</td><td>如果表达式expr成立，返回结果v1；否则，返回结果v2。</td></tr><tr><td>IFNULL(v1,v2)</td><td>如果v1的值不为NULL，则返回v1，否则返回v2</td></tr><tr><td>CASE</td><td>分支(详见下面)</td></tr></tbody></table><p><img src="E:\blog\source_posts\MySQL第七章\1647602564844.png" alt="1647602564844"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647602571566.png" alt="1647602571566"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647602933349.png" alt="1647602933349"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647602940594.png" alt="1647602940594"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647603076764.png" alt="1647603076764"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647603084553.png" alt="1647603084553"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647603265964.png" alt="1647603265964"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647604256409.png" alt="1647604256409"></p><h2 id="系统信息函数"><a href="#系统信息函数" class="headerlink" title="系统信息函数"></a>系统信息函数</h2><blockquote><p>系统信息函数用来查询MySQL数据库的系统信息。</p></blockquote><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回数据库的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回服务器的连接数</td></tr><tr><td>DATABASE()、SCHEMA</td><td>返回当前数据库名</td></tr><tr><td>USER()、SYSTEM_USER()、SESSION_USER()、CURRENT_USER()、CURRENT_USER</td><td>返回当前用户</td></tr><tr><td>CHARSET(str)</td><td>返回字符串str的字符集</td></tr><tr><td>COLLATION(str)</td><td>返回字符串str的字符排列方式</td></tr></tbody></table><p><img src="E:\blog\source_posts\MySQL第七章\1647604442801.png" alt="1647604442801"></p><p><img src="E:\blog\source_posts\MySQL第七章\1647604551212.png" alt="1647604551212"></p><h2 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h2><blockquote><p>加密函数是MySQL用来对数据进行加密的函数.</p></blockquote><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>MD5(str)</td><td>对字符串str进行散列，可以用于一些普通的不需要解密的数据加密，如密码</td></tr><tr><td>sha1</td><td>对字符串str进行散列，可以用于一些普通的不需要解密的数据加密，如密码，比MD5更安全</td></tr></tbody></table><p><img src="E:\blog\source_posts\MySQL第七章\1647604692982.png" alt="1647604692982"></p><h2 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h2><h3 id="1-进制转换"><a href="#1-进制转换" class="headerlink" title="1.进制转换"></a>1.进制转换</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制</td></tr><tr><td>OCT(x)</td><td>返回x的八进制</td></tr><tr><td>CONV(x,from_base,to_base)</td><td>将from_base进制的x，转成to_base进制</td></tr></tbody></table><pre class=" language-mysql"><code class="language-mysql">SELECT BIN(10),HEX(10),OCT(10),CONV(16,16,10);->1010 A 12 22</code></pre><p><img src="E:\blog\source_posts\MySQL第七章\1647604747963.png" alt="1647604747963"></p><h3 id="2-IP地址转换"><a href="#2-IP地址转换" class="headerlink" title="2.IP地址转换"></a>2.IP地址转换</h3><table><thead><tr><th>函数</th><th>作用</th></tr></thead><tbody><tr><td>INET_ATON(IP)</td><td>将点分十进制的IP地址转为数字</td></tr><tr><td>INET_NTOA(number)</td><td>将数字形式的IP转为点分十进制</td></tr></tbody></table><pre class=" language-mysql"><code class="language-mysql">SELECT INET_ATON('192.168.0.1')    ->3232235521SELECT INET_NTOA(3232235521)    ->192.168.0.1</code></pre><p><img src="E:\blog\source_posts\MySQL第七章\1647604858498.png" alt="1647604858498"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>敏捷开发流程</title>
      <link href="/2022/03/16/min-jie-kai-fa-liu-cheng/"/>
      <url>/2022/03/16/min-jie-kai-fa-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="一篇小文章了解企业的敏捷开发流程"><a href="#一篇小文章了解企业的敏捷开发流程" class="headerlink" title="一篇小文章了解企业的敏捷开发流程"></a>一篇小文章了解企业的敏捷开发流程</h1><h2 id="1-什么是敏捷开发流程："><a href="#1-什么是敏捷开发流程：" class="headerlink" title="1.什么是敏捷开发流程："></a>1.什么是敏捷开发流程：</h2><p> 　敏捷开发（Agile）是一种以人为核心、迭代、循序渐进的开发方法。在敏捷开发中，软件项目的构建被切分成多个子项目，各个子项目的成果都经过测试，具备集成和可运行的特征。简单地来说，敏捷开发并不追求前期完美的设计、完美编码，而是力求在很短的周期内开发出产品的核心功能，尽早发布出可用的版本。然后在后续的生产周期内，按照新需求不断迭代升级，完善产品。 </p><h2 id="2-为啥要有敏捷开发："><a href="#2-为啥要有敏捷开发：" class="headerlink" title="2.为啥要有敏捷开发："></a>2.为啥要有敏捷开发：</h2><p>敏捷开发流程可以让开发公司更好和用户更好的对接,让产品可随时变更,也让客户得到更好</p><p>的产品,相比于其它的开发流程，敏捷开发流程运营相当广泛。</p><h2 id="3-敏捷开发流程的具体步骤："><a href="#3-敏捷开发流程的具体步骤：" class="headerlink" title="3.敏捷开发流程的具体步骤："></a>3.敏捷开发流程的具体步骤：</h2><p>客户先与产品经理对接，弄清客户需求，然后在与程序员对接弄清能实现的功能，毕竟有些功能太无理，无法完成，然后再选出个项目经理，选出自己愿意参加的人，注意了：这里开始之前会有个会议，让需求具体化成清单，然后把清单分成模块，让程序员自己选择自己完成的再一个模块细化之后的模块，自己下保证书，这样可以让程序员自愿完成工作，不会懈怠，并且期间产品经理不得再提要求。</p><p>有人会问了：假如没有按时完成咋办，确实有时候真的无法按时完成，这就得减少功能的实现了，可以尽快的弄出主要需求框架给用户测试，假如客户测试不满意，产品经理会在下一次模块开始的时候加入客户想要的功能，再由程序员去完成。</p><p>那程序员之间怎么交流的呢？别急还有个站立会议：简简单单的会议就是让程序员每天都互相交流自己完成的进度，让程序员之间的沟通更加方便，更好的完成工作。</p><p>双人结伴编程，一个人提供编程的模块思路，一个人负责写代码，当然俩人肯定是会互换身份的。</p><p>软件完成之后还会有个软件测收。</p><h3 id="大概就是这些了。本人只是大概的阐述敏捷开发流程，想完整去了解具体的细节，可以自己去搜索。"><a href="#大概就是这些了。本人只是大概的阐述敏捷开发流程，想完整去了解具体的细节，可以自己去搜索。" class="headerlink" title="大概就是这些了。本人只是大概的阐述敏捷开发流程，想完整去了解具体的细节，可以自己去搜索。"></a>大概就是这些了。本人只是大概的阐述敏捷开发流程，想完整去了解具体的细节，可以自己去搜索。</h3>]]></content>
      
      
      <categories>
          
          <category> 敏捷开发流程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>c++中的前置和后置++注意事项</title>
      <link href="/2022/03/15/c-zhong-de-qian-zhi-he-hou-zhi-zhu-yi-shi-xiang/"/>
      <url>/2022/03/15/c-zhong-de-qian-zhi-he-hou-zhi-zhu-yi-shi-xiang/</url>
      
        <content type="html"><![CDATA[<h1 id="c-中的前置和后置加加没你想的这么简单"><a href="#c-中的前置和后置加加没你想的这么简单" class="headerlink" title="c++中的前置和后置加加没你想的这么简单"></a>c++中的前置和后置加加没你想的这么简单</h1><h2 id="1-前置-和后置-的区别1："><a href="#1-前置-和后置-的区别1：" class="headerlink" title="1.前置++和后置++的区别1："></a>1.前置++和后置++的区别1：</h2><p>前置是先加后赋值，后置是先赋值再加。</p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326199604.png" alt="1647326199604"></p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326216165.png" alt="1647326216165"></p><h2 id="2-前置-比后置-运行的速度快："><a href="#2-前置-比后置-运行的速度快：" class="headerlink" title="2.前置++比后置++运行的速度快："></a>2.前置++比后置++运行的速度快：</h2><h5 id="在汇编底层中后置-会比前置-多一行。"><a href="#在汇编底层中后置-会比前置-多一行。" class="headerlink" title="在汇编底层中后置++会比前置++多一行。"></a>在汇编底层中后置++会比前置++多一行。</h5><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326486077.png" alt="1647326486077"></p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326496232.png" alt="1647326496232"></p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326601044.png" alt="1647326601044"></p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326610839.png" alt="1647326610839"></p><h4 id="当然我这demo不是很准确毕竟也是有偶然的，但是确实是前置-快"><a href="#当然我这demo不是很准确毕竟也是有偶然的，但是确实是前置-快" class="headerlink" title="当然我这demo不是很准确毕竟也是有偶然的，但是确实是前置++快"></a>当然我这demo不是很准确毕竟也是有偶然的，但是确实是前置++快</h4><h2 id="3-作为学者的我们应该一探究竟。"><a href="#3-作为学者的我们应该一探究竟。" class="headerlink" title="3.作为学者的我们应该一探究竟。"></a>3.作为学者的我们应该一探究竟。</h2><p>其实前置++是不用产生中间变量的。而后置++产生了个中间变量接受了前面的值。</p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326840172.png" alt="1647326840172"></p><p>明确表示了左值不能赋值。</p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326879387.png" alt="1647326879387"></p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647326886308.png" alt="1647326886308"></p><h2 id="4-那这样子的话有啥用呢？"><a href="#4-那这样子的话有啥用呢？" class="headerlink" title="4.那这样子的话有啥用呢？"></a>4.那这样子的话有啥用呢？</h2><p>其实没啥大用，但是在重载前置++（–）和后置++（–）应该注意该不该使用引用。明显前置可以使用引用后置则不行。</p><p><img src="E:\blog\source_posts\c-中的前置和后置-注意事项\1647327353666.png" alt="1647327353666"></p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL第六章</title>
      <link href="/2022/03/13/mysql-di-liu-zhang/"/>
      <url>/2022/03/13/mysql-di-liu-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL条件查询"><a href="#MySQL条件查询" class="headerlink" title="MySQL条件查询"></a>MySQL条件查询</h1><h4 id="我们知道从-MySQL-表中使用-SELECT-语句来查询数据，如需有条件地从表中选取数据，可将-WHERE-子句添加到-SELECT-语句中。"><a href="#我们知道从-MySQL-表中使用-SELECT-语句来查询数据，如需有条件地从表中选取数据，可将-WHERE-子句添加到-SELECT-语句中。" class="headerlink" title="我们知道从 MySQL 表中使用 SELECT 语句来查询数据，如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。"></a>我们知道从 MySQL 表中使用 SELECT 语句来查询数据，如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句中。</h4><pre class=" language-mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 WHERE 条件;</code></pre><img src="E:\blog\source\_posts\MySQL第六章\1647167339514.png" alt="1647167339514"><h4 id="还有个运算符表"><a href="#还有个运算符表" class="headerlink" title="还有个运算符表:"></a>还有个运算符表:</h4><h4 id="运算符表"><a href="#运算符表" class="headerlink" title="运算符表**"></a>运算符表**</h4><table><thead><tr><th>关系运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !=</td><td>不等于</td></tr></tbody></table><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且（多个条件同时成立）</td></tr><tr><td>OR  或  ||</td><td>或者（多个条件任意成立一个）</td></tr><tr><td>NOT 或 ！</td><td>非，不是</td></tr></tbody></table><table><thead><tr><th>其他</th><th>功能</th></tr></thead><tbody><tr><td>BETWEEN…AND…</td><td>在某个范围之间（含最小、最大值）</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE</td><td>模糊匹配（_匹配单个字符，%匹配任意个字符）</td></tr><tr><td>IS [NOT] NULL</td><td>是 NULL</td></tr></tbody></table><h4 id="我这就不一一演示了"><a href="#我这就不一一演示了" class="headerlink" title="(我这就不一一演示了)"></a>(我这就不一一演示了)</h4><p><img src="E:\blog\source_posts\MySQL第六章\1647167652604.png" alt="1647167652604"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647167662947.png" alt="1647167662947"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647167821591.png" alt="1647167821591"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647167831035.png" alt="1647167831035"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647168231173.png" alt="1647168231173"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647168246478.png" alt="1647168246478"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647233875747.png" alt="1647233875747"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647233884999.png" alt="1647233884999"></p><h1 id="聚合函数-统计函数"><a href="#聚合函数-统计函数" class="headerlink" title="聚合函数(统计函数)"></a>聚合函数(统计函数)</h1><h3 id="SQL-允许对表中的数据进行计算，将一列数据作为一个整体，进行纵向计算。"><a href="#SQL-允许对表中的数据进行计算，将一列数据作为一个整体，进行纵向计算。" class="headerlink" title="SQL 允许对表中的数据进行计算，将一列数据作为一个整体，进行纵向计算。"></a>SQL 允许对表中的数据进行计算，将一列数据作为一个整体，进行纵向计算。</h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>MAX(column)</td><td>返回某列的最低值（没有则返回NULL）</td></tr><tr><td>MIN(column)</td><td>返回某列的最高值（没有则返回NULL）</td></tr><tr><td>COUNT(column)</td><td>返回某列的行数（不包括 NULL 值）</td></tr><tr><td>COUNT(*)</td><td>返回被选列行数（包括NULL）</td></tr><tr><td>SUM(column)</td><td>求和</td></tr><tr><td>AVG(column)</td><td>求平均值</td></tr></tbody></table><p>其中 COUNT 函数可用于任何数据类型 (因为它只是计数)，而 SUM 、AVG 函数都只能对数值类型做计算，MAX 和 MIN 可用于数值、字符串或是日期时间数据类型。</p><p><img src="E:\blog\source_posts\MySQL第六章\1647234145248.png" alt="1647234145248"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647234152224.png" alt="1647234152224"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647234214974.png" alt="1647234214974"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647234221662.png" alt="1647234221662"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647234263014.png" alt="1647234263014"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647234272733.png" alt="1647234272733"></p><h1 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h1><h4 id="1-统计函数一般是搭配分组查询-但是单独使用的情况一定是有的。"><a href="#1-统计函数一般是搭配分组查询-但是单独使用的情况一定是有的。" class="headerlink" title="1.统计函数一般是搭配分组查询;但是单独使用的情况一定是有的。"></a>1.统计函数一般是搭配分组查询;但是单独使用的情况一定是有的。</h4><p>那么什么是分组呢？**</p><p>分组这个概念在生活中其实是很常见的，比如有以下需求：</p><ul><li>1.在一个班级之中，要求男女各一组进行辩论赛</li><li>2.在公司中，要求每个部门一组进行拔河比赛</li></ul><p>对于第一个需求，假设存在学生表，那么在学生表之中一定会存在一个性别字段，性别只可能是男或者女。</p><p>而在公司之中，如果要进行部门分组，肯定需要一个部门列的内容存在重复。</p><p>分组只对数据有重复的字段才有意义。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-mysql"><code class="language-mysql">SELECT 分组字段/聚合函数 FROM 表名 [WHERE 条件] GROUP BY 分组字段 [HAVING 分组后条件];</code></pre><p><img src="E:\blog\source_posts\MySQL第六章\1647235078407.png" alt="1647235078407"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647235086422.png" alt="1647235086422"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647318763849.png" alt="1647318763849"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647318773968.png" alt="1647318773968"></p><p><strong>查询需求</strong>:</p><p>注意事项**</p><ol><li>如果一个查询之中不存在<code>GROUP BY</code>子句，那么在<code>SELECT</code>子句之中只允许出现统计函数，其他任何字段都不允许出现。</li></ol><pre class=" language-mysql"><code class="language-mysql">#错误的语句SELECT ename,COUNT(job) FROM emp;#正确的语句SELECT COUNT(job) FROM emp;</code></pre><ol start="2"><li>在统计查询之中(存在<code>GROUP BY</code>子句)，<code>SELECT</code>子句之中只允许出现分组字段(<code>GROUP BY</code>之后定义的字段)和统计函数，其他的任何字段都不允许出现。</li></ol><pre class=" language-mysql"><code class="language-mysql">#错误的语句SELECT ename,COUNT(job) FROM emp GROUP BY job;#正确的语句SELECT deptno,COUNT(job) FROM emp GROUP BY job;</code></pre><p>在以后进行分组操作的时候，本着一个原则：<code>GROUP BY</code>子句之中允许出现的字段才是<code>SELECT</code>子句中允许出现的字段。</p><p><img src="E:\blog\source_posts\MySQL第六章\1647319046295.png" alt="1647319046295"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647319053952.png" alt="1647319053952"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647319502295.png" alt="1647319502295"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647319533350.png" alt="1647319533350"></p><h4 id="WHERE和HAVING区别"><a href="#WHERE和HAVING区别" class="headerlink" title="WHERE和HAVING区别"></a>WHERE和HAVING区别</h4><ul><li>WHERE：是在分组之前使用(可以没有GROUP BY)，不允许使用统计函数；</li><li>HAVING：是在分组之后使用(必须结合GROUP BY)，允许使用统计函数。</li></ul><h2 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h2><blockquote><p>通过条件查询语句可以查询到符合用户需求的数据，但是查询到的数据一般都是按照数据最初被添加到表中的顺序来显示。为了使查询结果的顺序满足用户的要求，MySQL 提供了 ORDER BY 关键字来对查询结果进行排序。</p></blockquote><p>在实际应用中经常需要对查询结果进行排序，比如，在网上购物时，可以将商品按照价格进行排序；在医院的挂号系统中，可以按照挂号的先后顺序进行排序等。</p><p><strong>语法</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 ... ORDER BY 排序字段名 [ASC|DESC];</code></pre><p>语法说明：</p><ul><li>排序字段名：表示需要排序的字段名称，多个字段时用逗号隔开。</li><li>ASC|DESC：<code>ASC</code>表示字段按升序排序；<code>DESC</code>表示字段按降序排序。其中<code>ASC</code>为默认值。</li></ul><p><strong>特点</strong></p><ul><li>ORDER BY子句一般放到查询语句的最后面，LIMIT字句除外。</li></ul><ul><li>当排序的字段中存在空值时，ORDER BY 会将该空值作为最小值来对待。</li><li>ORDER BY 指定多个字段进行排序时，MySQL 会按照字段的顺序从左到右依次进行排序。</li><li><strong>注意</strong>：在对多个字段进行排序时，排序的第一个字段必须有相同的值，才会对第二个字段进行排序。如果第一个字段数据中所有的值都是唯一的，MySQL 将不再对第二个字段进行排序。</li></ul><p><img src="E:\blog\source_posts\MySQL第六章\1647320395426.png" alt="1647320395426"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647320405760.png" alt="1647320405760"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647321211552.png" alt="1647321211552"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647321219004.png" alt="1647321219004"></p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><blockquote><p>对于比较多的数据，如果在一个页面全部显示，查看起来会眼花缭乱。如果能进行分页显示，将更加快捷、清新的浏览！</p></blockquote><p><img src="E:\blog\source_posts\MySQL第六章\image-20220307162625907.png" alt="image-20220307162625907"></p><p><strong>语法</strong></p><pre class=" language-mysql"><code class="language-mysql">SELECT 字段名 FROM 表名 LIMIT 起始索引,查询记录数;</code></pre><p><strong>特点</strong></p><ul><li>起始索引从0开始，起始索引 = (查询页码 - 1) * 每页显示记录数;</li><li>如果查询的是第一页数据，起始索引可以省略，直接简写为LIMIT 10。</li></ul><p><img src="E:\blog\source_posts\MySQL第六章\1647321566452.png" alt="1647321566452"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647321574062.png" alt="1647321574062"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647322165356.png" alt="1647322165356"></p><p><img src="E:\blog\source_posts\MySQL第六章\1647322174388.png" alt="1647322174388"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL第五章</title>
      <link href="/2022/03/13/mysql-di-wu-zhang/"/>
      <url>/2022/03/13/mysql-di-wu-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL基本查询"><a href="#MySQL基本查询" class="headerlink" title="MySQL基本查询"></a>MySQL基本查询</h1><h2 id="MySQL-数据库一般使用SELECT语句来查询数据。"><a href="#MySQL-数据库一般使用SELECT语句来查询数据。" class="headerlink" title="MySQL 数据库一般使用SELECT语句来查询数据。"></a>MySQL 数据库一般使用SELECT语句来查询数据。</h2><p>(我这里是用Navicat演示的并且提前准备好了sql文件)</p><h2 id="1-怎么将sql语句在数据库中运行："><a href="#1-怎么将sql语句在数据库中运行：" class="headerlink" title="1.怎么将sql语句在数据库中运行："></a>1.怎么将sql语句在数据库中运行：</h2><p>左键点击你要用的数据库,然后选择运行sql文件,</p><p><img src="E:\blog\source_posts\MySQL第五章\1647164080829.png" alt="1647164080829"></p><p>点击你要选择的sql文件</p><p><img src="E:\blog\source_posts\MySQL第五章\1647164145824.png" alt="1647164145824"></p><p>这里要只有编码格式要相同一般都选择utf-8。</p><p><img src="E:\blog\source_posts\MySQL第五章\1647164205135.png" alt="1647164205135"></p><p>点击开始,然后把数据库刷新一下就可以了。</p><h2 id="2-我们开始做查询工作"><a href="#2-我们开始做查询工作" class="headerlink" title="2.我们开始做查询工作:"></a>2.我们开始做查询工作:</h2><p><strong>1. 查询多个字段</strong></p><p>以下为在MySQL数据库中查询数据通用的 SELECT 语法：</p><pre class=" language-mysql"><code class="language-mysql">SELECT 字段名,字段名... FROM 表名;SELECT * FROM 表名;                    #查询所有字段</code></pre><ul><li>查询语句中可以使用一个或者多个表，表之间使用逗号(,)分割，并使用WHERE语句来设定查询条件。</li><li>SELECT 命令可以读取一条或者多条记录。</li><li>你可以使用星号（*）来代替其他字段，SELECT语句会返回表的所有字段数据</li></ul><p><img src="E:\blog\source_posts\MySQL第五章\1647164442320.png" alt="1647164442320"></p><p><img src="E:\blog\source_posts\MySQL第五章\1647164453108.png" alt="1647164453108"></p><p><img src="E:\blog\source_posts\MySQL第五章\1647164738374.png" alt="1647164738374"></p><p>记得这里要选中你要运行的代码。</p><h4 id="2-设置别名"><a href="#2-设置别名" class="headerlink" title="2.设置别名"></a>2.设置别名</h4><pre class=" language-mysql"><code class="language-mysql">SELECT 字段1 [AS 别名],字段2 [AS 别名]... FROM 表名;</code></pre><p><img src="E:\blog\source_posts\MySQL第五章\1647164924733.png" alt="1647164924733"></p><p><img src="E:\blog\source_posts\MySQL第五章\1647164994163.png" alt="1647164994163"></p><h4 id="3-去除重复记录"><a href="#3-去除重复记录" class="headerlink" title="3.去除重复记录"></a>3.去除重复记录</h4><pre class=" language-mysql"><code class="language-mysql">SELECT DISTINCT 字段列表 FROM 表名;</code></pre><p><img src="E:\blog\source_posts\MySQL第五章\1647165120509.png" alt="1647165120509"></p><p><img src="E:\blog\source_posts\MySQL第五章\1647165129330.png" alt="1647165129330"></p><h4 id="4-它还能进行四则运算查询"><a href="#4-它还能进行四则运算查询" class="headerlink" title="4.它还能进行四则运算查询:"></a>4.它还能进行四则运算查询:</h4><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+</td><td>加法</td></tr><tr><td>-</td><td>减法</td></tr><tr><td>*</td><td>乘法</td></tr><tr><td>/（DIV）</td><td>除法</td></tr><tr><td>%（MOD）</td><td>求余</td></tr></tbody></table><p><img src="E:\blog\source_posts\MySQL第五章\1647165412788.png" alt="1647165412788"></p><p><img src="E:\blog\source_posts\MySQL第五章\1647165423581.png" alt="1647165423581"></p><h1 id="语句得加分号"><a href="#语句得加分号" class="headerlink" title="语句得加分号;"></a>语句得加分号;</h1>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>给vs配置QT环境</title>
      <link href="/2022/03/13/gei-vs-pei-zhi-qt-huan-jing/"/>
      <url>/2022/03/13/gei-vs-pei-zhi-qt-huan-jing/</url>
      
        <content type="html"><![CDATA[<h1 id="给VS配置QT"><a href="#给VS配置QT" class="headerlink" title="给VS配置QT"></a>给VS配置QT</h1><h2 id="1-我们为啥要在vs上写qt程序呢？"><a href="#1-我们为啥要在vs上写qt程序呢？" class="headerlink" title="1.我们为啥要在vs上写qt程序呢？"></a>1.我们为啥要在vs上写qt程序呢？</h2><p>1.VS比QT调试功能强大。</p><p>2.VS作为宇宙最强ide做为程序员习惯用。</p><p>3.VS多方面比qtcreator强大。</p><h2 id="2-怎么配置VS呢？"><a href="#2-怎么配置VS呢？" class="headerlink" title="2.怎么配置VS呢？"></a>2.怎么配置VS呢？</h2><h6 id="1-选择菜单栏-gt-扩展-gt-管理扩展"><a href="#1-选择菜单栏-gt-扩展-gt-管理扩展" class="headerlink" title="1.选择菜单栏->扩展->管理扩展"></a>1.选择菜单栏-&gt;扩展-&gt;管理扩展</h6><p><img src="E:\blog\source_posts\给vs配置QT环境\1647157639981.png" alt="1647157639981"></p><h6 id="2-给VS安装QT的插件"><a href="#2-给VS安装QT的插件" class="headerlink" title="2.给VS安装QT的插件"></a>2.给VS安装QT的插件</h6><p>选择菜单栏的 扩展-&gt;管理扩展，输入Qt搜索，然后下载Qt Visual Studio Tools（下载灰常的银杏，慢的死~还不一定能下载）</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647157759953.png" alt="1647157759953"></p><p>如果实在不能忍受这龟速，咱们来别的办法**</p><p>先到Qt官网下载对于版本的插件，我这里是Vs2020：</p><p><a href="https://download.qt.io/official_releases/vsaddin/">Qt官网插件下载</a></p><p>[微软拓展商店下载</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647157924810.png" alt="1647157924810"></p><p>这里有各种版本的，选择你的版本安装。</p><h3 id="3-安装VSIX-即上面下载的那个插件"><a href="#3-安装VSIX-即上面下载的那个插件" class="headerlink" title="3.安装VSIX(即上面下载的那个插件)"></a>3.安装VSIX(即上面下载的那个插件)</h3><p>如果是通过Vs下载的，会自动安装。</p><p>如果是手动下载的，需要双击自己安装。</p><p>打开安装包之后，点击Install等待安装完成即可。</p><p>安装之前，请先关掉Vs<code>没有关掉会出现界面，点击end tasks即可。</code></p><p>关闭Vs之后，一秒安装完成。</p><p>安装完成，关掉程序。<br>       (我以前安装过这里就不再演示了)</p><h2 id="4-设置插件"><a href="#4-设置插件" class="headerlink" title="4.设置插件:"></a>4.设置插件:</h2><p>再次打开vs，拓展-&gt;QT VS Tools -&gt;QT options</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647158330324.png" alt="1647158330324"></p><p>点击Qt Options之后会弹出如下界面</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647158480699.png" alt="1647158480699"></p><p>这里要选择你的对应的qt套件:</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647158731316.png" alt="1647158731316"></p><h3 id="5-VS创建Qt项目"><a href="#5-VS创建Qt项目" class="headerlink" title="5.VS创建Qt项目"></a>5.VS创建Qt项目</h3><p>在Vs中点击新建项目，搜索Qt找到Qt Widgets Application然后点击下一步</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647158929683.png" alt="1647158929683"></p><p>下一步之后，给项目取名称。</p><p>点击创建，然后点击Next。</p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647158998290.png" alt="1647158998290"></p><p><img src="E:\blog\source_posts\给vs配置QT环境\1647159022243.png" alt="1647159022243"></p><p>（上面的东西比较简单就不在叙述了）然后就可以运行了。</p>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL第四章</title>
      <link href="/2022/03/12/mysql-di-si-zhang/"/>
      <url>/2022/03/12/mysql-di-si-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL测试"><a href="#MySQL测试" class="headerlink" title="MySQL测试"></a>MySQL测试</h1><h2 id="1-文件的导入"><a href="#1-文件的导入" class="headerlink" title="1.文件的导入:"></a>1.文件的导入:</h2><p>数据库sql文件的导入输入source XXX/test.sql</p><p>这样我们可以用脚本文件不用敲这么多的命令行。</p><h2 id="2-查看有多少数据库"><a href="#2-查看有多少数据库" class="headerlink" title="2.查看有多少数据库:"></a>2.查看有多少数据库:</h2><pre class=" language-mysql"><code class="language-mysql">show databases;</code></pre><p>查看所有的数据库。</p><p><img src="E:\blog\source_posts\MySQL第四章\1647077479248.png" alt="1647077479248"></p><h2 id="3-查看库中的表"><a href="#3-查看库中的表" class="headerlink" title="3.查看库中的表:"></a>3.查看库中的表:</h2><pre class=" language-mysql"><code class="language-mysql">show tables;</code></pre><p>查看数据库下所有的数据表。</p><p><img src="E:\blog\source_posts\MySQL第四章\1647077565609.png" alt="1647077565609"></p><h2 id="4-SQL语句的规范"><a href="#4-SQL语句的规范" class="headerlink" title="4.SQL语句的规范:"></a>4.SQL语句的规范:</h2><p>SQL语句吧区分大小写。但是字符串常量区分大小写，建议命令大写，表名库名小写;</p><p>SQL语句可单行可多行书写，以分号结尾;</p><p>用空格和缩进来提高语句的可读性;</p><p>注释: 有三种形式:</p><p>可#单行好可以“ - -”（- -）里面是有空格的;</p><p>多行注释/* */。</p><pre class=" language-mysql"><code class="language-mysql">SHOW DATABASES;+--------------------+| Database           |+--------------------+| information_schema |        #主要存储了系统中的一些数据库对象信息，比如用户表信息、列信息、权限信息、字符集信息和分区信息等。| mysql              |        #MySQL的核心数据库，主要负责存储数据库用户、用户访问权限等 MySQL 自己需要使用的控制和管理信息。| performance_schema |        #主要用于收集数据库服务器性能参数。| sys                |        #sys 数据库主要提供了一些视图，数据都来自于 performation_schema，主要是让开发者和使用者更方便地查看性能问题。+--------------------+</code></pre><h2 id="5-数据库切换的基本语法是"><a href="#5-数据库切换的基本语法是" class="headerlink" title="5.数据库切换的基本语法是:"></a>5.数据库切换的基本语法是:</h2><pre class=" language-mysql"><code class="language-mysql">USE<dbname>;</code></pre><p><img src="E:\blog\source_posts\MySQL第四章\1647077536053.png" alt="1647077536053"></p><h2 id="6-想查看自己属于哪个数据库"><a href="#6-想查看自己属于哪个数据库" class="headerlink" title="6.想查看自己属于哪个数据库:"></a>6.想查看自己属于哪个数据库:</h2><pre class=" language-mysql"><code class="language-mysql">SELECT DATABASE();</code></pre><p><img src="E:\blog\source_posts\MySQL第四章\1647078850278.png" alt="1647078850278"></p><h2 id="7-如果自己想创建数据库"><a href="#7-如果自己想创建数据库" class="headerlink" title="7.如果自己想创建数据库:"></a>7.如果自己想创建数据库:</h2><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE <dbname>;</code></pre><p><img src="E:\blog\source_posts\MySQL第四章\1647078436170.png" alt="1647078436170"></p><h2 id="8-如果想删除"><a href="#8-如果想删除" class="headerlink" title="8.如果想删除:"></a>8.如果想删除:</h2><pre class=" language-mysql"><code class="language-mysql">DROP DATABASE <dbbname>;</code></pre><p><img src="E:\blog\source_posts\MySQL第四章\1647081294938.png" alt="1647081294938"></p><p>使用 DROP DATABASE 命令时要<strong>非常谨慎</strong>，在执行该命令后，MySQL 不会给出任何提示确认信息。DROP DATABASE 删除数据库后，数据库中存储的所有数据表和数据也将一同被删除，而且<strong>不能恢复</strong>。</p><h2 id="9-如果想知道表结构"><a href="#9-如果想知道表结构" class="headerlink" title="9.如果想知道表结构:"></a>9.如果想知道表结构:</h2><pre class=" language-mysql"><code class="language-mysql">DESC emp;</code></pre><h2 id="10-还有一种创建数据库的方式可以不报错只有警告"><a href="#10-还有一种创建数据库的方式可以不报错只有警告" class="headerlink" title="10.还有一种创建数据库的方式可以不报错只有警告:"></a>10.还有一种创建数据库的方式可以不报错只有警告:</h2><pre class=" language-mysql"><code class="language-mysql">CREATE DATABASE IF NOT EXISTS <dbname>; </code></pre><p><img src="E:\blog\source_posts\MySQL第四章\1647081819058.png" alt="1647081819058"></p><h2 id="11-还有一种创建数据库的方式可以不报错只有警告"><a href="#11-还有一种创建数据库的方式可以不报错只有警告" class="headerlink" title="11.还有一种创建数据库的方式可以不报错只有警告:"></a>11.还有一种创建数据库的方式可以不报错只有警告:</h2><pre class=" language-mysql"><code class="language-mysql">DROP DATABASE IF EXISTS <dbname>;</code></pre><p><img src="E:\blog\source_posts\MySQL第四章\1647082170570.png" alt="1647082170570"></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>libevent第一章</title>
      <link href="/2022/03/12/libevent-di-yi-zhang/"/>
      <url>/2022/03/12/libevent-di-yi-zhang/</url>
      
        <content type="html"><![CDATA[<h2 id="1-libevent-的介绍"><a href="#1-libevent-的介绍" class="headerlink" title="1.libevent 的介绍:"></a>1.libevent 的介绍:</h2><h2 id="libevet库具有跨平台的专注网络开发的库，而且开源（Windows，Linux，unix）的可使用。"><a href="#libevet库具有跨平台的专注网络开发的库，而且开源（Windows，Linux，unix）的可使用。" class="headerlink" title="libevet库具有跨平台的专注网络开发的库，而且开源（Windows，Linux，unix）的可使用。"></a>libevet库具有跨平台的专注网络开发的库，而且开源（Windows，Linux，unix）的可使用。</h2><h2 id="2-libevent下载进行解压"><a href="#2-libevent下载进行解压" class="headerlink" title="2.libevent下载进行解压"></a>2.libevent下载进行解压</h2><p><img src="C:\Users\虎牙、\AppData\Roaming\Typora\typora-user-images\1647071472972.png" alt="1647071472972"></p><p><img src="C:\Users\虎牙、\AppData\Roaming\Typora\typora-user-images\1647071615717.png" alt="1647071615717"></p><h2 id="3-进入源码"><a href="#3-进入源码" class="headerlink" title="3.进入源码:"></a>3.进入源码:</h2><p><img src="C:\Users\虎牙、\AppData\Roaming\Typora\typora-user-images\1647071834918.png" alt="1647071834918"></p><h2 id="libevent的下载和安装"><a href="#libevent的下载和安装" class="headerlink" title="libevent的下载和安装:"></a>libevent的下载和安装:</h2><p>源码安装: 可以参考readme。</p><p>或者：./configure 检查安装环境生成makefile。</p><p>再make      生成.o和可执行文件。</p><p>sudo make install 将必要的资源cp 到系统指定的目录。</p><p>进入sample目录，运行一些自带的demo。</p><p>（注意编译库的.c使用必须加-levent选项。)</p><p>库名libevent.so–&gt;/user/local/lib中可查看到。</p><h2 id="这种通信的特性是基于事件的异步通信模型。"><a href="#这种通信的特性是基于事件的异步通信模型。" class="headerlink" title="这种通信的特性是基于事件的异步通信模型。"></a>这种通信的特性是基于事件的异步通信模型。</h2><p>这里可能会遇到一个问题:</p><p>错误：没有这个文件或者目录</p><p>解决办法:</p><p>1.将用户用到的库统一放到一个目录下</p><p>2.向配置文件中，写入库文件所在的目录</p><p>3.更新/etc/ld.so.cache文件</p><p>然后我们就可以和连上的客户端通信了。</p>]]></content>
      
      
      <categories>
          
          <category> libevent </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL第三篇</title>
      <link href="/2022/03/11/mysql-di-san-pian/"/>
      <url>/2022/03/11/mysql-di-san-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL忘记了密码和Navicat的安装"><a href="#MySQL忘记了密码和Navicat的安装" class="headerlink" title="MySQL忘记了密码和Navicat的安装"></a>MySQL忘记了密码和Navicat的安装</h1><p>1.用管理员权限打开cmd，关闭mysql服务；</p><pre class=" language-css"><code class="language-css"> net stop mysql</code></pre><p>2.设置启动mysql服务时跳过权限验证；</p><pre class=" language-css"><code class="language-css"> mysqld --console --skip-grant-tables --shared-memory</code></pre><p>3.重新打开！重新打开！重新打开一个cmd窗口(用管理员权限)，先前的窗口不要关掉，然后输入mysql，如果成功登录，如下图所示：</p><p>4.使用指定的数据库</p><p>在<em>MySQL</em>中就有很多系统自带的数据库,那么在操作数据库之前就必须要确定是哪一个数据库。使用use 命令选择数据库。</p><pre class=" language-css"><code class="language-css">use mysql<span class="token punctuation">;</span></code></pre><p>5.修改密码</p><pre class=" language-css"><code class="language-css">alter user root<span class="token atrule"><span class="token rule">@localhost</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span></span></code></pre><p>卧槽，发现报错了，不要慌，关键来了！！</p><ul><li>先更新一下权限 <code>flush privileges;</code></li><li>再执行修改密码命令 <code>alter user root@localhost identified by '123456';</code></li></ul><p>6.退出mysql</p><pre class=" language-css"><code class="language-css">> quit<span class="token punctuation">;</span></code></pre><p>7.关闭所有控制台，重新打开一个，重启mysql服务，并登录。</p><pre class=" language-css"><code class="language-css">> net start mysql>mysql -uroot -p</code></pre><h1 id="安装Navicat-15-for-MySQL"><a href="#安装Navicat-15-for-MySQL" class="headerlink" title="安装Navicat 15 for MySQL"></a>安装Navicat 15 for MySQL</h1><p>**Navicat 15 for MySQL **是一款针对MySQL数据库而开发的第三方MySQL管理工具，该软件可以用于 MySQL 数据库服务器版本 3.21 或以上的和 MariaDB 5.1 或以上。能够同时连接 MySQL 和 MariaDB 数据库，并与 Amazon RDS、Amazon Aurora、Oracle Cloud、Microsoft Azure、阿里云、腾讯云和华为云等云数据库兼容，支持无缝数据迁移、简单的SQL编辑、智能数据库设计、高级安全连接等功能，为数据库管理、开发和维护提供了一款直观而强大的图形界面，是管理和开发 MySQL 或 MariaDB 的理想解决方案。</p><p>1.下载Navicat for MySQL 15**</p><p><a href="https://pan.baidu.com/s/1eFDCYwjv4H90y6u9dRC6xA">网盘下载 提取码 4ixt</a></p><p><strong>2.下载激活工具</strong></p><p><a href="https://pan.baidu.com/s/1j2C3qz3zMQc11YUC04l8BQ">网盘下载 提取码 09az</a></p><p><strong>3.安装Navicat</strong></p><p>按步骤安装即可，安装完毕后先不要打开软件，<font style="color:red">断开网络连接，一定要断开！！！</font></p><p>4.把Navicat Keygen 放到navicat.exe安装目录下</p><p>5.以<strong>管理员身份运行激活工具</strong>，在弹出界面选择Navicat 15版本， Products选择MySQL，Languages选择Simplefied Chinese 点击Patch，如下：</p><p>6.打开Navicat，点击注册</p><p>7.返回到激活工具界面，点击Generate会自动填写注册码到软件输入框</p><p>8.在点击激活按钮，点击手动激活</p><p>9.将请求码复制到激活工具的文本框中，点击Generate激活码会自动填写到Navicat激活码文本框中，点击激活即可。</p><p>10.点击激活，弹出激活成功，over！</p><h1 id="连接到Mysql"><a href="#连接到Mysql" class="headerlink" title="连接到Mysql"></a>连接到Mysql</h1><p>1.在Navicat中新建MySQL连接。</p><p>2.默认端口3306，单击测试连接按钮，连接成功！最后点击确定即可。</p><p>3.双击连接名称，即可看到所有数据库。</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql第二章</title>
      <link href="/2022/03/11/mysql-di-er-zhang/"/>
      <url>/2022/03/11/mysql-di-er-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL简介"><a href="#MySQL简介" class="headerlink" title="MySQL简介"></a>MySQL简介</h1><p>MySQL 的历史最早可以追溯到1979年，Monty Widenius用BASIC设计了一个报表工具，过了不久，又将此工具使用C语言重写，移植到UNIX平台，当时只是一个底层的面向报表的存储引擎。</p><h2 id="MySQL历史的由来："><a href="#MySQL历史的由来：" class="headerlink" title="MySQL历史的由来："></a>MySQL历史的由来：</h2><p>1985年，三个瑞典人 David Axmark、Allan Larsson和 Michael Widenius 成立了一家公司，这个公司最初并不是为了开发数据库产品，而是在实现想法的过程中需要一个数据库并希望能够使用开源的产品。但在当时并没有一个合适的选择。因此自己设计了一个利用索引顺序存取数据的方法，也就是ISAM（Indexed Sequential Access Method）存储引擎核心算法的前身。此软件以创始人之一 Michael Widenius 女儿 My 的名字命名。MySQL的 Logo 为海豚标志，如下图所示，海豚代表了速度、动力、精确等 MySQL所拥有的特性。Logo 中海豚名字叫”sakila”，是由来自非洲斯威士兰的开源软件开发者 Ambrose Twebaze 提供的。根据 Ambrose 所说，Sakila来自一种叫 SiSwati 的斯威士兰方言，也是在 Ambrose 的家乡乌干达附近坦桑尼亚的 Arusha 的一个小镇的名字。MySQL 是一款免费开源、小型、关系型数据库管理系统。随着该数据库功能的不断完善、性能的不断提高，可靠性不断增强。</p><p>2000年4月，MySQL对旧的存储引擎进行了整理，命名为 MyISAM。</p><p>2001 年，支持事务处理和行级锁存储引擎 InnoDB 被集成到 MySQL 发行版中，该版本集成了MyISAM与 InnoDB存储引擎，MySQL与InnoDB的正式结合版本是4.0。2004年10月，发布了经典的4.1版本。 2005年10月，发布了里程碑的一个版本，MySQL 5.0，在5.0中加入了游标，存储过程，触发器，视图和事务的支持。在 5.0 之后的版本里，MySQL 明确地表现出迈向高性能数据库的发展步伐。MySOL 公司于2008年1月16号被 SUN公司收购，而在2009 年 SUN 又被 Oracle 收购。MySQL的发展前途一片光明。</p><p>MySQL 虽然是免费的，但与其他商业数据库一样，具有数据库系统的通用性，提供了数据的存取、增加、修改、删除或更加复杂的数据操作。同时 MySQL 是关系型的数据库系统，支持标准的结构化查询语言，同时 MySQL 为客户端提供了不同的程序接口和链接库，如C、C++、Java、PHP 等。目前 MySQL 被广泛地应用在 Internet 上的中小型网站中。由于其体积小、速度快、总体拥有成本低，尤其是开放源码这一特点，因此许多中小型网站为了降低网站总体拥有成本而选择了MySQL 作为网站数据库。</p><h2 id="MySQL下载与安装："><a href="#MySQL下载与安装：" class="headerlink" title="MySQL下载与安装："></a>MySQL下载与安装：</h2><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>1，进入MySQL官网<a href="https://www.mysql.com/">官网地址</a>，选择Downloads</p><p>2，往下翻，找到<a href="https://dev.mysql.com/downloads/">MySQL Community (GPL) Downloads »</a>，点击进入。</p><p>3，选择MySQL Community Server</p><p>4，下载解压版</p><p>5，弹出如下页面，选择不登录直接下载(下载过程可能有点慢)</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1，下载之后，解压放到一个自己能找到的目录里面。</p><p>2，以管理员身份运行cmd，并切换到mysql的bin目录。</p><p>3，输入<code>mysqld --install</code>安装mysql服务，移除服务的命令是<code>mysqld --remove</code></p><p>4，输入<code>mysqld --initialize --console</code>初始化，记一下初始密码哦~</p><p>5，然后输入<code>net start mysql</code> 启动服务，停止服务命令是<code>net stop mysql</code></p><p>6，最后登录一下mysql -uroot -p，出现如下界面说明已经成功登录啦~</p><p>7，然后自己修改一下密码 <code>set password for 'root'@'localhost'='你的新密码'</code></p><p>8，输入quit可以退出mysql哦</p><p>9，为了方便登录操作MySQL，设置一个环境变量，进入bin目录，然后复制路径，添加到系统环境变量</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql第一章</title>
      <link href="/2022/03/11/mysql-di-yi-zhang/"/>
      <url>/2022/03/11/mysql-di-yi-zhang/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库系统概述"><a href="#数据库系统概述" class="headerlink" title="数据库系统概述"></a>数据库系统概述</h1><h2 id="1-什么叫数据"><a href="#1-什么叫数据" class="headerlink" title="1.什么叫数据:"></a>1.什么叫数据:</h2><p>数据是现实社会和电脑之间交互的东西，描述事物的符号记录成数据。</p><h2 id="2-数据库和数据有什么关系呢？"><a href="#2-数据库和数据有什么关系呢？" class="headerlink" title="2.数据库和数据有什么关系呢？"></a>2.数据库和数据有什么关系呢？</h2><p>顾名思义;数据是数据库的储存的基本单位,我们肯定会想，数据和数字有什么    关系呢除了基本的数字，的确有关系，数字本是数据的一种，但是不紧紧是数字是数据，还有比如图书馆的名字、作者什么的都是数据，我们接触到的东西都可以数据化。</p><h2 id="3-什么叫记录呢？"><a href="#3-什么叫记录呢？" class="headerlink" title="3.什么叫记录呢？"></a>3.什么叫记录呢？</h2><p>将信息按照一个对象的属性方式排成一行的属于记录。例如：在日常生活之中，可以这样描述一本书的信息，《C Primer Plus》是人民邮电出版社出版的图书，作者是普拉塔(Prata S.)，定价是89.00，出版日期是2005年2月1日，这样的信息在计算机中就可以使用下面的方式来描述</p><h2 id="如果是多条记录呢？"><a href="#如果是多条记录呢？" class="headerlink" title="如果是多条记录呢？"></a>如果是多条记录呢？</h2><p>现在有多条这种记录，我们那么就可以列成一张表，通过表来管理数据。</p><h2 id="那么你用表统计一列又算什么？"><a href="#那么你用表统计一列又算什么？" class="headerlink" title="那么你用表统计一列又算什么？"></a>那么你用表统计一列又算什么？</h2><p>一列就是一个个属性组成的。而且每一行的数据都成为记录，那么每一列的内容都称为字段。每一列都有自己的数据类型。</p><h2 id="那么我们应该开始介绍数据库了："><a href="#那么我们应该开始介绍数据库了：" class="headerlink" title="那么我们应该开始介绍数据库了："></a>那么我们应该开始介绍数据库了：</h2><p>数据库想都不用想肯定要先记录数据;而且是按照一定格式的。那么它的定义是什么呢？数据库是长期储存在计算机内，有组织、可共享的大量数据的集合。数据库中的数据按照一定的数据模型具有许多的优秀特点的东西。例如：较小的冗余度、数据的独立性完整性和易拓展性,并可以为各种用户共享;所以数据库具有永久储存、有组织和可共享的特点。</p><h2 id="那么我们怎么管理数据库呢？"><a href="#那么我们怎么管理数据库呢？" class="headerlink" title="那么我们怎么管理数据库呢？"></a>那么我们怎么管理数据库呢？</h2><p>没错我们就靠一个数据管理系统;它和操作系统差不多;具有强大的功能:数据操作和事务管理、运营、数据定义等等。</p><h2 id="我们应该把它们联系起来叫啥名字呢？"><a href="#我们应该把它们联系起来叫啥名字呢？" class="headerlink" title="我们应该把它们联系起来叫啥名字呢？"></a>我们应该把它们联系起来叫啥名字呢？</h2><p>这个不用你操心，前面的大佬早帮你起好了，数据库系统;</p><p>呀！这名字我好像在哪听过，没错数据库系统就是软件和硬件的统称。包括计算机和储存设备、数据库观看系统、支持数据库管理系统的操作系统和多种语言。</p><h2 id="哇哦！这么强大的东西它应该有一门专属于自己的语言吧！"><a href="#哇哦！这么强大的东西它应该有一门专属于自己的语言吧！" class="headerlink" title="哇哦！这么强大的东西它应该有一门专属于自己的语言吧！"></a>哇哦！这么强大的东西它应该有一门专属于自己的语言吧！</h2><p>没错数据库有一门通用的语言叫SQl。</p><h2 id="那么它的历史是啥呢？"><a href="#那么它的历史是啥呢？" class="headerlink" title="那么它的历史是啥呢？"></a>那么它的历史是啥呢？</h2><p>SQL其发音为字母 S-Q-L 或 sequel，是 Structure Query Language（结构化查询语言）的缩写，是目前广泛使用的关系数据库标准语言。该语言由 IBM在20世纪70年代开发出来，被作为IBM关系数据库 System R的原型关系语言，实现关系数据库中信息的检索。由于 SQL 简单易学、功能丰富和使用灵活，因此受到众多人的追捧。经过不断的发展、完善和扩充，SOL 被美国国家标准局（ANSI）确定为关系型数据库语言的美国标准，后来又被国际标准化组织（ISO）采纳为关系数据库语言的国际标准。几乎所有的关系型数据库管理系统软件都支持SQL，许多厂商还对SQL基本命令进行了不同程度的扩充。</p><h2 id="组成部分："><a href="#组成部分：" class="headerlink" title="组成部分："></a>组成部分：</h2><ul><li><p>数据操作语言（Data Manipulation Language，DML）</p><blockquote><p>实现对数据的操作，用于检索或修改数据。</p></blockquote></li><li><p>数据定义语言（Data Definition Language，DDL）</p><blockquote><p>用于定义数据的结构，创建、修改或者删除数据库对象。</p></blockquote></li><li><p>数据控制语言（Data Control Language，DCL）</p><blockquote><p>用于控制数据库用户的权限。</p></blockquote></li><li><p>事务控制 （Transaction Control，TCL）</p><blockquote><p>定义了包含事务开始喝结束的相关命令。</p></blockquote></li><li><p>DDL包含的子部分</p><ul><li>完整性约束（integrity constraint ）</li><li>视图定义  (View Definition)</li></ul></li></ul><h2 id="你说它这么强大但是有没有证据？"><a href="#你说它这么强大但是有没有证据？" class="headerlink" title="你说它这么强大但是有没有证据？"></a>你说它这么强大但是有没有证据？</h2><ul><li>SQL 不是某个特定数据库供应商专有的语言。几乎所有重要的数据库管理系统都支持 SQL，<br>所以只要学习了SQL 就能与所有数据库进行交互。</li><li>SQL 简单易学，该语言的语句都是由描述性很强的英语单词组成，而且这些单词的数目不多。</li><li>SQL 高度非过程化，即用SQL进行数据库操作，只需指出”做什么”，无须指明”怎么做”，存取路径的选择和操作的执行由数据库管理系统自动完成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>qt的简史</title>
      <link href="/2022/03/10/qt-de-jian-shi/"/>
      <url>/2022/03/10/qt-de-jian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="1-QT"><a href="#1-QT" class="headerlink" title="1.QT"></a>1.QT</h1><h2 id="1-什么是QT："><a href="#1-什么是QT：" class="headerlink" title="1.什么是QT："></a>1.什么是QT：</h2><pre class=" language-txt"><code class="language-txt">Qt（官方发音 [kju:t]，音同 cute）是一个跨平台的 C++ 开发库，主要用来开发图形用户界面（Graphical User Interface，GUI）程序，当然也可以开发不带界面的命令行（Command User Interface，CUI）程序。Qt 是纯 C++ 开发的，所以学好 C++ 非常有必要，Qt 还存在 Python、Ruby、Perl 等脚本语言的绑定， 也就是说可以使用脚本语言开发基于 Qt 的程序。开源社区就是这样，好东西就会被派生扩展，到处使用， 越来越壮大。Qt 支持的操作系统有很多，例如通用操作系统 Windows、Linux、Unix，智能手机系统 Android、iOS、WinPhone， 嵌入式系统 QNX、VxWorks 等等。</code></pre><h2 id="2-QT能做什么："><a href="#2-QT能做什么：" class="headerlink" title="2.QT能做什么："></a>2.QT能做什么：</h2><pre class=" language-txt"><code class="language-txt">Qt 虽然经常被当做一个 GUI 库，用来开发图形界面应用程序，但这并不是 Qt 的全部；Qt 除了可以绘制漂亮的界面（包括控件、布局、交互），还包含很多其它功能，比如多线程、访问数据库、图像处理、音频视频处理、网络通信、文件操作等，这些 Qt 都已经内置了。Qt 是应用程序开发的一站式解决方案，有了 Qt，你就可以高枕无忧了！Qt 本身包含的模块也日益丰富， 一直有新模块和第三方模块加入进来。 大部分应用程序都可以使用 Qt 实现，除了与计算机底层结合特别紧密的，例如驱动开发，它直接使用硬件提供的编程接口，而不能使用操作系统自带的函数库。1997年，Qt 被用来开发 Linux 桌面环境 KDE，大获成功，使 Qt 成为 Linux 环境下开发 C++ GUI 程序的事实标准。下面的程序都使用 Qt 开发：WPS、YY语音、Skype、豆瓣电台、虾米音乐、淘宝助理、千牛、暴雪的战网客户端、VirtualBox、Opera、咪咕音乐、Google地图、Adobe Photoshop Album 等。Linux 也是嵌入式的主力军，广泛应用于消费类电子、工业控制、军工电子、电信/网络/通讯、航空航天、汽车电子、医疗设备、仪器仪表等相关行业。Qt 虽然也支持手机操作系统，但是由于 Android 本身已经有 Java 和 Kotlin，iOS 本身已经有 Objective-C 和 Swift，所以 Qt 在移动端的市场份额几乎可以忽略。总起来说，Qt 主要用于桌面程序开发和嵌入式开发。</code></pre><h2 id="3-Qt-的历史"><a href="#3-Qt-的历史" class="headerlink" title="3.Qt 的历史:"></a>3.Qt 的历史:</h2><pre class=" language-txt"><code class="language-txt">说到 Qt 的发展史，那真是一波三折，几经卖身。Qt 最早是 1991 年由挪威的 Eirik Chambe-Eng 和 Haavard Nord 开发的， 他们随后于 1994 年 3 月 4 号正式成立奇趣科技公司（Trolltech）。Qt 原本是商业授权的跨平台开发库， 在 2000 年奇趣科技公司为开源社区发布了遵循 GPL（GNU General Public License）许可证的开源版本。在 2008 年，诺基亚公司收购了奇趣科技公司，并增加了 LGPL（GNU Lesser General Public License）的授权模式。诺基亚联合英特尔利用 Qt 开发了全新的智能手机系统 MeeGo，可惜遭遇了微软木马屠城，诺基亚被迫放弃了 MeeGo， 而 Qt 商业授权业务也于 2011 年 3 月出售给了芬兰 IT 服务公司 Digia。</code></pre><h2 id="4-QT和KDE："><a href="#4-QT和KDE：" class="headerlink" title="4.QT和KDE："></a>4.QT和KDE：</h2><pre class=" language-txt"><code class="language-txt">之前提到 Qt 原本是商业授权软件，是怎么开源的呢？这就涉及 Qt 和 KDE 的纠葛了。KDE 是 Linux 操作系统的桌面环境，与 GNOME 桌面是类似的，作为开源桌面它们竞争的情况更为多见。KDE 是采用 GPL 许可证发布的开源软件，而最初 Qt 是商业授权的，存在商业侵权风险，GNOME 则是基于开源 GTK 库的，没有什么商业风险，这一度是 GNOME 优越于 KDE 的特性。由于 Qt 的商业授权，KDE 社区一度混乱纠结，与此同时 GNOME 则如火如荼发展起来了。 KDE 毕竟算是亲儿子，被另一波人欺负，奇趣科技公司当然看不下去了，最后是奇趣科技公司为了赢得开发者的支持，为 Qt 增加了 GPL 的开源授权， 对于开源社区而言，遵循 GPL 使用 Qt 就不需要付费，这为 KDE 解决了燃眉之急。之后 KDE 桌面和 GNOME 都发展壮大起来，都做得越来越好了。</code></pre><h2 id="5-GPL和LGPL："><a href="#5-GPL和LGPL：" class="headerlink" title="5.GPL和LGPL："></a>5.GPL和LGPL：</h2><pre class=" language-txt"><code class="language-txt">除了商业授权，目前 Qt 的开源授权有两种，一种是 GPL 授权，另一种是 LGPL 授权（诺基亚收购后新增）。对这两种开源授权，简单来说，使用 GPL 版本的软件一定还是 GPL 的开源软件，无论是使用了 Qt 的程序代码还是修改了 Qt 库代码，都必须按照 GPL 来发布，这是 GPL 的传染性。GPL 是什么都要开源，这对商业软件应用是不利的，所以诺基亚增加了 LGPL 授权 （第一个 L 可以叫 Lesser 宽松版或 Library 开发库版）。使用 LGPL 授权就可以利用 Qt 官方动态链接库，而不必开放商业代码。只要不修改和定制 Qt 库，仅使用 Qt 官方发布的动态链接库就可以不开源，这是商业友好的授权模式。其实只要不是做商业，就不太需要关注用什么授权，以 GPL 授权发布程序代码就可以了。</code></pre><h2 id="6-如何选择开源协议呢："><a href="#6-如何选择开源协议呢：" class="headerlink" title="6.如何选择开源协议呢："></a>6.如何选择开源协议呢：</h2><pre class=" language-txt"><code class="language-txt">世界上的开源协议有上百种，很少有人能彻底搞清它们之间的区别，即使在最流行的六种开源协议——GPL、BSD、MIT、Mozilla、Apache 和 LGPL——之中做选择，也很复杂。乌克兰程序员 Paul Bagwell 画了一张分析图，说明应该怎么选择开源协议，大家看了一目了然，真是清爽。最后请参考qt官网；</code></pre><h1 id="2-为啥要用QT："><a href="#2-为啥要用QT：" class="headerlink" title="2.为啥要用QT："></a>2.为啥要用QT：</h1><pre class=" language-txt"><code class="language-txt">用 Qt 来开发 Windows 桌面程序有以下优点：- 简单易学：Qt 封装的很好，几行代码就可以开发出一个简单的客户端，不需要了解 Windows API。- 资料丰富：资料丰富能够成倍降低学习成本，否则你只能去看源码，关于 DirectUI、Htmlayout、aardio 的资料就很少。- 漂亮的界面：Qt 很容易做出漂亮的界面和炫酷的动画，而 MFC、WTL、wxWidgets 比较麻烦。- 独立安装：Qt 程序最终会编译为本地代码，不需要其他库的支撑，而 Java 要安装虚拟机，C# 要安装 .NET Framework。- 跨平台：如果你的程序需要运行在多个平台下，同时又希望降低开发成本，Qt 几乎是必备的。</code></pre><h2 id="QT和MFC："><a href="#QT和MFC：" class="headerlink" title="QT和MFC："></a>QT和MFC：</h2><pre class=" language-txt"><code class="language-txt">读者经常将 MFC 和 Qt 进行对比，MFC 只能应用在 Windows 平台，而 Qt 是跨平台的，一次编写，到处运行。另外，Qt 已经封装了底层细节，学习 Qt 将会非常简单；而 MFC 只是给 Windows API 加了一层包装，不了解 Windows API 也学不好 MFC，大家普遍反映 MFC 难学。我们不能简单地说 Qt 好还是 MFC 好，两者都有用武之地；但是初学者学习 Qt 会比较简单，不用应付那些烦人的 Windows API，很快就能开发出带有漂亮界面的应用程序</code></pre><h1 id="3-Qt-Creator"><a href="#3-Qt-Creator" class="headerlink" title="3.Qt Creator:"></a>3.Qt Creator:</h1><pre class=" language-txt"><code class="language-txt">Qt Creator是跨平台的 Qt IDE， Qt Creator 是 Qt 被 Nokia收购后推出的一款新的轻量级集成开发环境（IDE）。此 IDE 能够跨平台运行，支持的系统包括 Linux（32 位及 64 位）、Mac OS X 以及 Windows。使用QtCreator创建的项目目录中不能包含中文和空格)(切记不然会出现莫名其妙的错误)QtCreator默认使用Utf8格式编码对文件字符进行编码</code></pre><pre class=" language-txt"><code class="language-txt">为了处理汉字，程序员设计了用于简体中文的GB2312和用于繁体中文的big5。GB2312 支持的汉字太少，1995年的汉字扩展规范GBK1.0，支持了更多的汉字。2000年的 GB18030取代了GBK1.0成为了正式的国家标准。Unicode 也是一种字符编码方法，不过它是由国际组织设计，可以容纳全世界所有语言文字的编码方案。</code></pre><h2 id="修改Qt-Creator文件编码：菜单栏-gt-工具-gt-选项-gt-文本编辑器-gt-行为-gt-文件编码"><a href="#修改Qt-Creator文件编码：菜单栏-gt-工具-gt-选项-gt-文本编辑器-gt-行为-gt-文件编码" class="headerlink" title="修改Qt Creator文件编码：菜单栏->工具->选项->文本编辑器->行为->文件编码"></a>修改Qt Creator文件编码：菜单栏-&gt;工具-&gt;选项-&gt;文本编辑器-&gt;行为-&gt;文件编码</h2><h2 id="主界面："><a href="#主界面：" class="headerlink" title="主界面："></a>主界面：</h2><h2 id="左边第一个是欢迎界面；"><a href="#左边第一个是欢迎界面；" class="headerlink" title="左边第一个是欢迎界面；"></a>左边第一个是欢迎界面；</h2><p>下面是文本编辑器；</p><p>然后是可视化窗口编辑界面（设计窗口编辑界面）；</p><p>然后是调试界面；</p><p>然后是项目属性设置界面；</p><p>然后是查阅文档的界面；</p><h3 id="左下角的分别是："><a href="#左下角的分别是：" class="headerlink" title="左下角的分别是："></a>左下角的分别是：</h3><p>设置调试模式：release和debug；</p><p>然后是运行模式：</p><p>然后是程序调试：</p><p>然后是项目构建：（编译）;</p><h2 id="右上角的是："><a href="#右上角的是：" class="headerlink" title="右上角的是："></a>右上角的是：</h2><p>new是新建项目;</p><p>open是打开已有项目;</p><h3 id="后面是创建项目："><a href="#后面是创建项目：" class="headerlink" title="后面是创建项目："></a>后面是创建项目：</h3><p>这里要选择模板：Application</p><h3 id="填写项目名称和路径（切记不能有中文和空格）"><a href="#填写项目名称和路径（切记不能有中文和空格）" class="headerlink" title="填写项目名称和路径（切记不能有中文和空格）"></a>填写项目名称和路径（切记不能有中文和空格）</h3><h3 id="选择编译系统选择qmake即可"><a href="#选择编译系统选择qmake即可" class="headerlink" title="选择编译系统选择qmake即可"></a>选择编译系统选择qmake即可</h3><h3 id="然后选择窗口类信息："><a href="#然后选择窗口类信息：" class="headerlink" title="然后选择窗口类信息："></a>然后选择窗口类信息：</h3><p>第一个是窗口类名;<br>        第二个是父类;</p><p> 第三个是头文件;</p><p>第四个便是源文件;</p><p>还有注意的是ui文件;</p><p>然后默认;</p><h3 id="套件特别重要"><a href="#套件特别重要" class="headerlink" title="套件特别重要:"></a>套件特别重要:</h3><p>我们选择的mingw套件;</p><p>不显示套件的话是安装的时候没有选;</p><h2 id="我们到了项目文件了"><a href="#我们到了项目文件了" class="headerlink" title="我们到了项目文件了:"></a>我们到了项目文件了:</h2><p>主函数：main.cpp:</p><pre class=" language-c++"><code class="language-c++">#include<Application>(类程序的头文件)#included"widget"(是你自己创建的头文件)int main(int argc,char *argv[]){QApplication a(argc,argv);//应用程序的对象，有且只有一个;widget w;//定义一个类的对象w.show();//显示窗口（不加这个widget它不会显示出来）return a.exec();//这个特别终于因为这个是消息循环}</code></pre><h2 id="我们自定义的头文件"><a href="#我们自定义的头文件" class="headerlink" title="我们自定义的头文件:"></a>我们自定义的头文件:</h2><pre class=" language-c++"><code class="language-c++">#ifndef WIDGET_H//防止头文件重复包含#define WIDGET_H#include<Qwidget>//自己定义类的父类头文件我们这边是讲解没有ui文件的后期将会讲到ui文件class Widget:publice Qwidget{  Q_OBJECT//信号与槽的必须品public:Widget(QWidget *parent=nullptr);//构造函数~Widget();//析构函数}#endif</code></pre><h2 id="我们的源文件少不了"><a href="#我们的源文件少不了" class="headerlink" title="我们的源文件少不了:"></a>我们的源文件少不了:</h2><pre class=" language-c++"><code class="language-c++">#include"widget"//头文件Widget::Widget(Qwidget *parent):Qwidget(parent){}Widget::~Widget(){}</code></pre><p>*.pro文件:这是Qt的项目文件注释是#</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#项目编译时需要加载哪些模块</span><span class="token attr-name">QT</span> <span class="token attr-value">   +=core gui#编译时要加的模块</span><span class="token attr-name">CONFIG</span> <span class="token attr-value">+=c++11#QT支持的c++版本</span><span class="token attr-name">DEFINES</span> <span class="token attr-value">+= QT_DEPRECATED_WARNINGS#这是低版本的函数给出警告</span><span class="token attr-name">SOURCES</span> <span class="token attr-value">+= \    main.cpp \    widget.cpp</span><span class="token comment" spellcheck="true">    #源文件的包含</span><span class="token attr-name">HEADERS</span> <span class="token attr-value">+= \    widget.h</span><span class="token comment" spellcheck="true">#相应的头文件包含</span><span class="token comment" spellcheck="true">#部署的默认规则</span><span class="token attr-name">qnx</span><span class="token punctuation">:</span> <span class="token attr-value">target.path = /tmp/$${TARGET}/bin                    #嵌入式</span><span class="token attr-name">else</span><span class="token punctuation">:</span> <span class="token attr-value">unix:!android: target.path = /opt/$${TARGET}/bin    #unix</span><span class="token comment" spellcheck="true">!isEmpty(target.path): INSTALLS += target</span><span class="token comment" spellcheck="true">#我也不是搞嵌入式的不太清楚</span></code></pre><h2 id="快捷键："><a href="#快捷键：" class="headerlink" title="快捷键："></a>快捷键：</h2><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><ul><li>运行     Ctrl + r</li><li>编译     Ctrl + b</li><li>注释     Ctrl + /</li><li>字体缩放 Ctrl + 鼠标滚轮</li><li>查找/替换 Ctrl + f</li><li>整行移动   Ctrl + Shift + ↑ 或 ↓</li><li>自动对齐   Ctrl + i</li><li>帮助文档</li><li>第一种：Qt Creator 直接查看   F1</li><li>第二种：打开独立的帮助文档程序  assistant</li><li>同名.h 和 .cpp 之间的切换  F4</li><li>快速添加函数的定义  Alt + Enter      <span style="font-size:15px"><code>鼠标移动到函数申明上</code></span></li><li>修改变量名，并应用到所有用到该变量的地方  Ctrl + Shift +r</li><li>快速打开输出窗口 Alt + 数字键(1-8)</li></ul><p>书签功能,即在某行代码处进行标记,方便以后找到。书签也可以添加文字注。</p><ul><li><p>按Ctrl + M   添加/删除书签</p></li><li><p>按Ctrl + .     查找并移动到下一个标签</p></li></ul><h2 id="主题配置-菜单栏-gt-工具-gt-选项-gt-文本编辑器"><a href="#主题配置-菜单栏-gt-工具-gt-选项-gt-文本编辑器" class="headerlink" title="主题配置:菜单栏->工具->选项->文本编辑器"></a>主题配置:<code>菜单栏-&gt;工具-&gt;选项-&gt;文本编辑器</code></h2><p>​        上面是选择系统自带的，当然也可以自己配置一个</p><ul><li><p>比如xml文件 <code>Visual studio white(Qt creator代码样式).xml</code></p></li><li><p>把该文件复制到Qt的安装目录下的-&gt;Qt\Qt5.14.2\Tools\QtCreator\share\qtcreator\styles目录中</p></li><li><p>最后进入文本编辑器选择</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> QT </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>简单的象棋开发</title>
      <link href="/2022/03/09/jian-dan-de-xiang-qi-kai-fa/"/>
      <url>/2022/03/09/jian-dan-de-xiang-qi-kai-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="简单的象棋开发"><a href="#简单的象棋开发" class="headerlink" title="简单的象棋开发"></a>简单的象棋开发</h1><h6 id="我们需要准备的知识是c语言基础和easyx图形库"><a href="#我们需要准备的知识是c语言基础和easyx图形库" class="headerlink" title="我们需要准备的知识是c语言基础和easyx图形库"></a>我们需要准备的知识是c语言基础和easyx图形库</h6><h6 id="首先头文件少不了"><a href="#首先头文件少不了" class="headerlink" title="首先头文件少不了:"></a>首先头文件少不了:</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span>(c语言的头文件)</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;graphics.h></span>（easyx的）</span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;mmsystem.h></span>（音乐播放的）</span><span class="token macro property">#<span class="token directive keyword">pragma</span> comment(lib,"winmm.lib")（链接上音乐播放器的库）</span></code></pre><h6 id="然后老套路了"><a href="#然后老套路了" class="headerlink" title="然后老套路了:"></a>然后老套路了:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h6 id="创建图形窗口（这里不创建会听到熟悉的声音）"><a href="#创建图形窗口（这里不创建会听到熟悉的声音）" class="headerlink" title="创建图形窗口（这里不创建会听到熟悉的声音）:"></a>创建图形窗口（这里不创建会听到熟悉的声音）:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// (第三个参数SHOWCONSOLE控制控制台窗口的显示与否)</span><span class="token punctuation">}</span></code></pre><h6 id="还有个问题图形窗口会闪退"><a href="#还有个问题图形窗口会闪退" class="headerlink" title="还有个问题图形窗口会闪退:"></a>还有个问题图形窗口会闪退:</h6><p>所以我们需要阻塞窗口`：</p><pre class=" language-c"><code class="language-c"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>或者：</p><pre><code>getchar();</code></pre><h6 id="象棋的属性和一些初始化"><a href="#象棋的属性和一些初始化" class="headerlink" title="象棋的属性和一些初始化:"></a>象棋的属性和一些初始化:</h6><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">define</span> INTERVAL 50 </span><span class="token comment" spellcheck="true">//前面的间隔</span><span class="token macro property">#<span class="token directive keyword">define</span> CHESS_GRID_SIZE 70</span><span class="token comment" spellcheck="true">//格子宽度</span><span class="token macro property">#<span class="token directive keyword">define</span> ROW 10</span><span class="token macro property">#<span class="token directive keyword">define</span> COL 9</span><span class="token macro property">#<span class="token directive keyword">define</span> WIN_WIDTH ((COL-1)*CHESS_GRID_SIZE+INTERVAL*2+250)</span><span class="token comment" spellcheck="true">//窗口宽度计算得出</span><span class="token macro property">#<span class="token directive keyword">define</span> WIN_HEIGHT ((ROW-1)*CHESS_GRID_SIZE+INTERVAL*2)</span><span class="token comment" spellcheck="true">//窗口高度计算得出</span>IMAGE img_chessBoard<span class="token punctuation">;</span><span class="token punctuation">(</span>定义背景图<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>加载背景图<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">loadimage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>img_chessBoard<span class="token punctuation">,</span> <span class="token string">"./res/Chess.jpg"</span><span class="token punctuation">,</span> <span class="token number">650</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">enum</span> Pieces <span class="token comment" spellcheck="true">//棋子</span><span class="token punctuation">{</span>    SPACE <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>    車<span class="token punctuation">,</span> 馬<span class="token punctuation">,</span> 象<span class="token punctuation">,</span> 士<span class="token punctuation">,</span> 将<span class="token punctuation">,</span> 砲<span class="token punctuation">,</span> 卒<span class="token punctuation">,</span>    俥<span class="token punctuation">,</span> 马<span class="token punctuation">,</span> 相<span class="token punctuation">,</span> 仕<span class="token punctuation">,</span> 帥<span class="token punctuation">,</span> 炮<span class="token punctuation">,</span> 兵<span class="token punctuation">,</span>    BEGIN<span class="token punctuation">,</span> END<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给id赋值</span><span class="token keyword">int</span> redChess<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> 車<span class="token punctuation">,</span> 馬<span class="token punctuation">,</span> 象<span class="token punctuation">,</span> 士<span class="token punctuation">,</span> 将<span class="token punctuation">,</span> 砲<span class="token punctuation">,</span> 卒 <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> blackChess<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> 俥<span class="token punctuation">,</span> 马<span class="token punctuation">,</span> 相<span class="token punctuation">,</span> 仕<span class="token punctuation">,</span> 帥<span class="token punctuation">,</span> 炮<span class="token punctuation">,</span> 兵 <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绘制时转化成字符串</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ChessName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"車"</span><span class="token punctuation">,</span><span class="token string">"馬"</span><span class="token punctuation">,</span><span class="token string">"象"</span><span class="token punctuation">,</span><span class="token string">"士"</span><span class="token punctuation">,</span><span class="token string">"将"</span><span class="token punctuation">,</span><span class="token string">"砲"</span><span class="token punctuation">,</span><span class="token string">"卒"</span><span class="token punctuation">,</span><span class="token string">"俥"</span><span class="token punctuation">,</span> <span class="token string">"马"</span><span class="token punctuation">,</span> <span class="token string">"相"</span><span class="token punctuation">,</span> <span class="token string">"仕"</span><span class="token punctuation">,</span> <span class="token string">"帥"</span><span class="token punctuation">,</span> <span class="token string">"炮"</span><span class="token punctuation">,</span> <span class="token string">"兵"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">struct</span> Chess<span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//棋子名称</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//棋子类型，红棋，还是黑棋</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//坐标</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span>    bool river<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//是否过了河</span><span class="token punctuation">}</span>map<span class="token punctuation">[</span>ROW<span class="token punctuation">]</span><span class="token punctuation">[</span>COL<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><h6 id="鼠标的点击初始化"><a href="#鼠标的点击初始化" class="headerlink" title="鼠标的点击初始化:"></a>鼠标的点击初始化:</h6><pre class=" language-c"><code class="language-c">POINT begin <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> end <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//记录前后两次点击的下标</span><span class="token keyword">int</span> state <span class="token operator">=</span> BEGIN<span class="token punctuation">;</span><span class="token keyword">int</span> whereMove <span class="token operator">=</span> RED<span class="token punctuation">;</span></code></pre><h6 id="游戏开始初始化"><a href="#游戏开始初始化" class="headerlink" title="游戏开始初始化:"></a>游戏开始初始化:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GameInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">loadImg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//遍历二维数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> COL<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> chessname <span class="token operator">=</span> SPACE<span class="token punctuation">;</span>            <span class="token keyword">int</span> mcolor <span class="token operator">=</span> BLACK<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//black黑色</span>            <span class="token comment" spellcheck="true">//黑棋初始化</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                mcolor <span class="token operator">=</span> BLACK<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//第1行</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        temp<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        temp1 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> temp2<span class="token punctuation">;</span>                        temp2<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    chessname <span class="token operator">=</span> blackChess<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span><span class="token punctuation">;</span>                    temp1<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//设置炮</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    chessname <span class="token operator">=</span> blackChess<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//设置小兵</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    chessname <span class="token operator">=</span> blackChess<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token comment" spellcheck="true">//红旗初始化</span>            <span class="token punctuation">{</span>                mcolor <span class="token operator">=</span> RED<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//最后一行</span>                <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        temp<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">else</span>                    <span class="token punctuation">{</span>                        temp1 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> temp2<span class="token punctuation">;</span>                        temp2<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    chessname <span class="token operator">=</span> redChess<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span><span class="token punctuation">;</span>                    temp1<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//设置炮</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">7</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span> k <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    chessname <span class="token operator">=</span> redChess<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//设置小兵</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> k <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    chessname <span class="token operator">=</span> redChess<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> mcolor<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> chessname<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>river <span class="token operator">=</span> false<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">=</span> k <span class="token operator">*</span> CHESS_GRID_SIZE <span class="token operator">+</span> INTERVAL<span class="token punctuation">;</span>            map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">=</span> i <span class="token operator">*</span> CHESS_GRID_SIZE <span class="token operator">+</span> INTERVAL<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="游戏绘制"><a href="#游戏绘制" class="headerlink" title="游戏绘制:"></a>游戏绘制:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">GameDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setbkcolor</span><span class="token punctuation">(</span><span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cleardevice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setlinecolor</span><span class="token punctuation">(</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setlinestyle</span><span class="token punctuation">(</span>PS_SOLID<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setfillcolor</span><span class="token punctuation">(</span><span class="token function">RGB</span><span class="token punctuation">(</span><span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">162</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putimage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>img_chessBoard<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//画棋子</span>    <span class="token function">settextstyle</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"楷体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setbkmode</span><span class="token punctuation">(</span>TRANSPARENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ROW<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> COL<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">!=</span> SPACE<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> BLACK<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token function">settextcolor</span><span class="token punctuation">(</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setlinecolor</span><span class="token punctuation">(</span>BLACK<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span>                <span class="token punctuation">{</span>                    <span class="token function">settextcolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">setlinecolor</span><span class="token punctuation">(</span>RED<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token function">fillcircle</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">fillcircle</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">outtextxy</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">,</span> ChessName<span class="token punctuation">[</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//画点击出现的边框</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> END <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">!=</span> SPACE<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">setlinecolor</span><span class="token punctuation">(</span>BLUE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">line</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">line</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">line</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">line</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="游戏控制"><a href="#游戏控制" class="headerlink" title="游戏控制:"></a>游戏控制:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">KeyControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> ExMessage msg<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">peekmessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> EM_MOUSE<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>message <span class="token operator">==</span> WM_LBUTTONDOWN<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取鼠标点击得数组下标</span>            <span class="token keyword">int</span> row <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>y <span class="token operator">-</span> INTERVAL<span class="token punctuation">)</span> <span class="token operator">/</span> CHESS_GRID_SIZE<span class="token punctuation">;</span>            <span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>x <span class="token operator">-</span> INTERVAL<span class="token punctuation">)</span> <span class="token operator">/</span> CHESS_GRID_SIZE<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//if (msg.y > map[row][col].y - 30 &amp;&amp; msg.y&lt;map[row][col].y + 30 &amp;&amp; msg.x>map[row][col].x - 30 &amp;&amp; msg.x &lt; map[row][col].x + 30)</span>            <span class="token comment" spellcheck="true">//{</span>            <span class="token comment" spellcheck="true">//    //在棋子上点击</span>            <span class="token comment" spellcheck="true">//}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>x <span class="token operator">></span> map<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>y <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                col<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>y <span class="token operator">></span> map<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                row<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span>x <span class="token operator">></span> map<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span>y <span class="token operator">></span> map<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                row<span class="token operator">++</span><span class="token punctuation">;</span>                col<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> BEGIN<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"begin:(%d,%d)\n"</span><span class="token punctuation">,</span> begin<span class="token punctuation">.</span>x<span class="token punctuation">,</span> begin<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                begin<span class="token punctuation">.</span>x <span class="token operator">=</span> row<span class="token punctuation">;</span>                begin<span class="token punctuation">.</span>y <span class="token operator">=</span> col<span class="token punctuation">;</span>                state <span class="token operator">=</span> END<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>state <span class="token operator">==</span> END<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"end:(%d,%d)\n"</span><span class="token punctuation">,</span> end<span class="token punctuation">.</span>x<span class="token punctuation">,</span> end<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>                end<span class="token punctuation">.</span>x <span class="token operator">=</span> row<span class="token punctuation">;</span>                end<span class="token punctuation">.</span>y <span class="token operator">=</span> col<span class="token punctuation">;</span>                state <span class="token operator">=</span> BEGIN<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="游戏规则"><a href="#游戏规则" class="headerlink" title="游戏规则:"></a>游戏规则:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> check（POINT begin， POINT end）<span class="token punctuation">{</span><span class="token keyword">int</span> _count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>水平方向<span class="token keyword">int</span> tmax <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> tmin <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>如果（开始。x <span class="token operator">==</span> 结束。（十）    <span class="token punctuation">{</span>tmax <span class="token operator">=</span> max（begin<span class="token punctuation">.</span>是的，结束。y）<span class="token punctuation">;</span>tmin <span class="token operator">=</span> min（begin<span class="token punctuation">.</span>是的，结束。y）<span class="token punctuation">;</span><span class="token keyword">for</span> （<span class="token keyword">int</span> i <span class="token operator">=</span> tmin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmax<span class="token punctuation">;</span> i<span class="token operator">++</span>）        <span class="token punctuation">{</span><span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id ！<span class="token operator">=</span> 空格）            <span class="token punctuation">{</span>_count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>否则如果（开始。y <span class="token operator">==</span> 结束。y）    <span class="token punctuation">{</span>垂直方向tmax <span class="token operator">=</span> max（begin<span class="token punctuation">.</span>x，结束。x）<span class="token punctuation">;</span>tmin <span class="token operator">=</span> min（begin<span class="token punctuation">.</span>x，结束。x）<span class="token punctuation">;</span><span class="token keyword">for</span> （<span class="token keyword">int</span> i <span class="token operator">=</span> tmin <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tmax<span class="token punctuation">;</span> i<span class="token operator">++</span>）        <span class="token punctuation">{</span><span class="token keyword">if</span> （map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id ！<span class="token operator">=</span> 空格）            <span class="token punctuation">{</span>_count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>返回_count<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h6 id="棋子的移动："><a href="#棋子的移动：" class="headerlink" title="棋子的移动："></a><strong>棋子的移动：</strong></h6><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> chessMove（）<span class="token punctuation">{</span>布尔 isok <span class="token operator">=</span> 假<span class="token punctuation">;</span>printf（<span class="token string">"whereMove %d \n"</span>， whereMove）<span class="token punctuation">;</span>点击的不是同一个，以及都有了数据如果 （！（开始。x <span class="token operator">==</span> 结束。x <span class="token operator">&amp;&amp;</span> begin<span class="token punctuation">.</span>y <span class="token operator">==</span> 结束。y） <span class="token operator">&amp;&amp;</span>begin<span class="token punctuation">.</span>x ！<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>x ！<span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id ！<span class="token operator">=</span> 空格<span class="token operator">&amp;&amp;</span> （map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> 空格<span class="token operator">||</span>map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>键入 ！<span class="token operator">=</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>。类型）<span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>类型 <span class="token operator">==</span> 其中移动）    <span class="token punctuation">{</span>POINT general<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span>，<span class="token number">3</span>，<span class="token number">7</span>，<span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双方九宫格左上角的位置</span><span class="token keyword">switch</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>（id）        <span class="token punctuation">{</span>案例件数：：将：表壳件数：：帥：<span class="token keyword">for</span> （<span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> t<span class="token operator">++</span>）            <span class="token punctuation">{</span><span class="token keyword">for</span> （<span class="token keyword">int</span> i <span class="token operator">=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>。x<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>。x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span>）                <span class="token punctuation">{</span><span class="token keyword">for</span> （<span class="token keyword">int</span> k <span class="token operator">=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>。y<span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> 一般<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span>）                    <span class="token punctuation">{</span>如果（结束。x <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>y <span class="token operator">==</span> k <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//结束位置在九宫格内</span>（开始。x <span class="token operator">==</span> 结束。x <span class="token operator">||</span>开始。y <span class="token operator">==</span> 结束。y） <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">///结束位置和开始位置，在同一水平或垂直方向（只能走直线）</span>（腹肌（结束。x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>腹肌（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">1</span>） <span class="token comment" spellcheck="true">//一次只能走一格</span>                            <span class="token punctuation">)</span>                        <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>表壳片： ：士：表壳片：：仕：<span class="token keyword">for</span> （<span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> t<span class="token operator">++</span>）            <span class="token punctuation">{</span><span class="token keyword">for</span> （<span class="token keyword">int</span> i <span class="token operator">=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>。x<span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>。x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span>）                <span class="token punctuation">{</span><span class="token keyword">for</span> （<span class="token keyword">int</span> k <span class="token operator">=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>。y<span class="token punctuation">;</span>k <span class="token operator">&lt;=</span> 一般<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>k<span class="token operator">++</span>）                    <span class="token punctuation">{</span>如果（结束。x <span class="token operator">==</span> i <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>y <span class="token operator">==</span> k <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">//结束位置在九宫格内</span>（开始。x ！<span class="token operator">=</span> 结束。x <span class="token operator">&amp;&amp;</span> begin<span class="token punctuation">.</span>y ！<span class="token operator">=</span> 结束。y） <span class="token operator">&amp;&amp;</span> <span class="token comment" spellcheck="true">///结束位置和开始位置，不在同一水平或垂直方向（只能走斜线）</span>（腹肌（结束。x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>腹肌（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">1</span>） <span class="token comment" spellcheck="true">//一次只能走一格</span>                            <span class="token punctuation">)</span>                        <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>案例件数：：相：表壳件：：象：如果 （（结束。x <span class="token operator">==</span> 开始。x <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>y <span class="token operator">==</span> 开始。y <span class="token operator">-</span> <span class="token number">2</span>）<span class="token comment" spellcheck="true">// ||（完。x == 开始。x + 2 &amp;&amp; end.y == 开始。y - 2）</span><span class="token comment" spellcheck="true">// ||（完。x == 开始。x - 2 &amp;&amp; end.y == 开始。y + 2）</span><span class="token comment" spellcheck="true">// ||（完。x == 开始。x + 2 &amp;&amp; end.y == 开始。y + 2）</span>            <span class="token comment" spellcheck="true">//    )</span>如果 （abs（结束。x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> abs（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>。类型）            <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>表壳件：：马：表壳片：：马：<span class="token comment" spellcheck="true">/*如果 （（完。x == 开始。x + 1 &amp;&amp; end.y == 开始。y + 2）||（完。x == 开始。x + 1 &amp;&amp; end.y == 开始。y - 2）||（完。x == 开始。x - 1 &amp;&amp; end.y == 开始。y + 2）||（完。x == 开始。x - 1 &amp;&amp; end.y == 开始。y - 2）||（完。x == 开始。x + 2 &amp;&amp; end.y == 开始。y + 1）||（完。x == 开始。x + 2 &amp;&amp; end.y == 开始。y - 1）||（完。x == 开始。x - 2 &amp;&amp; end.y == 开始。y + 1）||（完。x == 开始。x - 2 &amp;&amp; end.y == 开始。y - 1）                )*/</span>如果 （（abs（结束。x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> abs（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">2</span>）<span class="token operator">||</span>（腹肌（结束。x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> abs（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">1</span>））            <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>表壳件数：：俥：表壳件数：：車：判断直行如果（开始。x <span class="token operator">==</span> 结束。x <span class="token operator">||</span>开始。y <span class="token operator">==</span> 结束。y）            <span class="token punctuation">{</span>落子位置为空，落子位置和源位置之间没有子挡路<span class="token keyword">if</span> （check（begin， end） <span class="token operator">==</span> <span class="token number">0</span>）                <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>案例片数：：炮：表壳件数：：砲：判断直行如果（开始。x <span class="token operator">==</span> 结束。x <span class="token operator">||</span>开始。y <span class="token operator">==</span> 结束。y）            <span class="token punctuation">{</span>落子位置为空，落子位置和源位置之间没有子挡路<span class="token keyword">if</span> （（map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> SPACE <span class="token operator">&amp;&amp;</span> check（begin， end） <span class="token operator">==</span> <span class="token number">0</span>）<span class="token comment" spellcheck="true">//走子</span><span class="token operator">||</span>（map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id ！<span class="token operator">=</span> SPACE <span class="token operator">&amp;&amp;</span> check（begin， end） <span class="token operator">==</span> <span class="token number">1</span>））<span class="token comment" spellcheck="true">//吃子</span>                <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token punctuation">}</span>吃子判断，落子位置有子，落子位置和源位置之间有且只有一个字挡路            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>案例片：：兵：表壳件数：：卒：没过河只准向前，不转左右<span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>类型 <span class="token operator">==</span> 黑色 <span class="token operator">&amp;&amp;</span> 开始。x <span class="token operator">&lt;=</span> <span class="token number">4</span>）            <span class="token punctuation">{</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>河流 <span class="token operator">=</span> 假<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>类型 <span class="token operator">==</span> 黑色 <span class="token operator">&amp;&amp;</span> 开始。x <span class="token operator">></span> <span class="token number">4</span>）            <span class="token punctuation">{</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>河流 <span class="token operator">=</span> 真<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>键入 <span class="token operator">==</span> RED <span class="token operator">&amp;&amp;</span> begin。x <span class="token operator">>=</span> <span class="token number">5</span>）            <span class="token punctuation">{</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>河流 <span class="token operator">=</span> 假<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>键入 <span class="token operator">==</span> RED <span class="token operator">&amp;&amp;</span> begin。x <span class="token operator">&lt;</span> <span class="token number">5</span>）            <span class="token punctuation">{</span>map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>河流 <span class="token operator">=</span> 真<span class="token punctuation">;</span>            <span class="token punctuation">}</span>如果没过河，只能向前走<span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>河流 <span class="token operator">==</span> 假 <span class="token operator">&amp;&amp;</span> 结束。y <span class="token operator">==</span> 开始。y）            <span class="token punctuation">{</span><span class="token keyword">if</span> （（map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>类型 <span class="token operator">==</span> 黑色 <span class="token operator">&amp;&amp;</span> 结束。x <span class="token operator">==</span> 开始。x <span class="token operator">+</span> <span class="token number">1</span>） <span class="token operator">||</span>（map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>。type <span class="token operator">==</span> RED <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>x <span class="token operator">==</span> 开始。x <span class="token operator">-</span> <span class="token number">1</span>））                <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果过了河，不能往回走</span><span class="token keyword">else</span> <span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>河流 <span class="token operator">==</span> 真）            <span class="token punctuation">{</span>如果为黑棋（上方），并且结束位置不小于开始位置<span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>类型 <span class="token operator">==</span> 黑色 <span class="token operator">&amp;&amp;</span> 结束。x <span class="token operator">></span> <span class="token operator">=</span> 开始。x <span class="token operator">&amp;&amp;</span> （abs（end<span class="token punctuation">.</span>x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>腹肌（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">1</span>））                <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果为红棋（下方），并且结束位置不大于开始位置</span><span class="token keyword">else</span> <span class="token keyword">if</span> （map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> RED <span class="token operator">&amp;&amp;</span> end<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> <span class="token operator">=</span> 开始。x <span class="token operator">&amp;&amp;</span> （abs（end<span class="token punctuation">.</span>x <span class="token operator">-</span> 开始。x） <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">||</span>腹肌（结束。y <span class="token operator">-</span> 开始。y） <span class="token operator">==</span> <span class="token number">1</span>））                <span class="token punctuation">{</span>isok <span class="token operator">=</span> true<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>休息<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">if</span> （isok <span class="token operator">==</span> true）        <span class="token punctuation">{</span>落子声音mciSendString（<span class="token string">"close PLAY"</span>， <span class="token number">0</span>， <span class="token number">0</span>， <span class="token number">0</span>）<span class="token punctuation">;</span>mciSendString（<span class="token string">"open ./res/playChess.mp3 别名播放"</span>， <span class="token number">0</span>， <span class="token number">0</span>， <span class="token number">0</span>）<span class="token punctuation">;</span>mciSendString（<span class="token string">"play PLAY"</span>， <span class="token number">0</span>， <span class="token number">0</span>， <span class="token number">0</span>）<span class="token punctuation">;</span>map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>。id<span class="token punctuation">;</span>map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>键入 <span class="token operator">=</span>map<span class="token punctuation">[</span>开始。x<span class="token punctuation">[</span>开始。y<span class="token punctuation">]</span>。类型<span class="token punctuation">;</span>map<span class="token punctuation">[</span>end<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>end<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>river <span class="token operator">=</span> map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>。河流<span class="token punctuation">;</span>此处有待完善map<span class="token punctuation">[</span>begin<span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>begin<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">=</span> 空间<span class="token punctuation">;</span>显示哪方行棋<span class="token keyword">if</span> （其中Move <span class="token operator">==</span> RED）            <span class="token punctuation">{</span>其中移动 <span class="token operator">=</span> 黑色<span class="token punctuation">;</span>            <span class="token punctuation">}</span>还            <span class="token punctuation">{</span>其中移动 <span class="token operator">=</span> 红色<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>重置点击属性状态 <span class="token operator">=</span> 开始<span class="token punctuation">;</span>开始。x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>开始。y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>结束。x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>结束。y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="判断输赢："><a href="#判断输赢：" class="headerlink" title="判断输赢："></a><strong>判断输赢：</strong></h6><pre class=" language-c"><code class="language-c">bool <span class="token function">JudgeWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    POINT general<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双方九宫格左上角的位置</span>    <span class="token keyword">int</span> isok <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> t<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> general<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">.</span>y <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//统计将领数量，正常为两个</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> 将 <span class="token operator">||</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">.</span>id <span class="token operator">==</span> 帥<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    isok<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果两个首领都在，则未结束，只有一个，则结束</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>isok <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> true<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h6 id="main函数的最终写法"><a href="#main函数的最终写法" class="headerlink" title="main函数的最终写法:"></a>main函数的最终写法:</h6><pre class=" language-c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token function">initgraph</span><span class="token punctuation">(</span>WIN_WIDTH<span class="token punctuation">,</span> WIN_HEIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//图像窗口</span>    <span class="token function">GameInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//初始化</span>    <span class="token function">BeginBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//双缓冲</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//循环绘制</span>    <span class="token punctuation">{</span>        <span class="token function">GameDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlushBatchDraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">KeyControl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chessMove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">JudgeWin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> true<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//判断结束弹出窗口</span>        <span class="token punctuation">{</span>            <span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token function">GetHWnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"游戏结束~"</span><span class="token punctuation">,</span> <span class="token string">"Waring"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
